/* Generated By:JavaCC: Do not edit this line. Qss.java */
public class Qss implements QssConstants {
	static java.util.Stack stack = new java.util.Stack();
	static Evidence data;
	static String stringToken = null;

  static private boolean jj_initialized_once = false;
  static public QssTokenManager token_source;
  static ASCII_CharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static final private int[] jj_la1_0 = {0x1,0x81802009,0x81802008,0x0,0x0,0x0,0x20000000,0x40000000,0x0,0x0,0x0,0x0,0x1800000,0x6000000,0x81802008,0x81800000,0x0,0x2008,0x0,0x0,0x2008,0x2008,};
  static final private int[] jj_la1_1 = {0x2000000,0x3443d00,0x1443d00,0x8000000,0x80,0x40,0x0,0x0,0xc,0xc,0x33,0x33,0x4000,0x0,0x1443d00,0x0,0x20000000,0x1443d00,0x20000000,0x440000,0x0,0x440000,};
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static final class JJCalls {
	int gen;
	Token first;
	int arg;
	JJCalls next;
  }

   public Qss() {
   }   
  public Qss(QssTokenManager tm) {
	if (jj_initialized_once) {
	  System.out.println("ERROR: Second call to constructor of static parser.  You must");
	  System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
	  System.out.println("       during parser generation.");
	  throw new Error();
	}
	jj_initialized_once = true;
	token_source = tm;
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  
  public Qss(java.io.InputStream stream) {
	if (jj_initialized_once) {
	  System.out.println("ERROR: Second call to constructor of static parser.  You must");
	  System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
	  System.out.println("       during parser generation.");
	  throw new Error();
	}
	jj_initialized_once = true;
	jj_input_stream = new ASCII_CharStream(stream, 1, 1);
	token_source = new QssTokenManager(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  
  public Qss(java.io.Reader stream) {
	if (jj_initialized_once) {
	  System.out.println("ERROR: Second call to constructor of static parser.  You must");
	  System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
	  System.out.println("       during parser generation.");
	  throw new Error();
	}
	jj_initialized_once = true;
	jj_input_stream = new ASCII_CharStream(stream, 1, 1);
	token_source = new QssTokenManager(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  
  static final public void ANDExpression() throws ParseException {
	EqualityExpression();
	label_6:
	while (true) {
	  if (jj_2_2(2)) {
		;
	  } else {
		break label_6;
	  }
	  jj_consume_token(AND);
	  EqualityExpression();
				Datum b = (Datum) stack.pop();
				Datum a = (Datum) stack.pop();
				stack.push(DatumMath.and(a,b));
	}
  }  
  static final public void AdditiveExpression() throws ParseException {
							  Token op;
	MultiplicativeExpression();
	label_9:
	while (true) {
	  if (jj_2_3(2)) {
		;
	  } else {
		break label_9;
	  }
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case PLUS:
		jj_consume_token(PLUS);
		break;
	  case MINUS:
		jj_consume_token(MINUS);
		break;
	  case DOT:
		jj_consume_token(DOT);
		break;
	  default:
		jj_la1[12] = jj_gen;
		jj_consume_token(-1);
		throw new ParseException();
	  }
																				 op = token;
	  MultiplicativeExpression();
				Datum b = (Datum) stack.pop();
				Datum a = (Datum) stack.pop();
			if ( op.kind == PLUS ) {
						  stack.push(DatumMath.add(a,b));
						}
			else if (op.kind == MINUS) {
						stack.push(DatumMath.subtract(a,b));
				}
				else if (op.kind == DOT) {
						stack.push(DatumMath.concat(a,b));
				}
	}
  }  
  static final public void AssignmentExpression() throws ParseException {
							   Token t;
	t = jj_consume_token(ID);
	jj_consume_token(58);
	ConditionalExpression();
				Datum d = (Datum) stack.pop();
				data.set(t.image,d);
				stack.push(d);
  }  
  static final public void ConditionalExpression() throws ParseException {
	LogicalORExpression();
	label_1:
	while (true) {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case 59:
		;
		break;
	  default:
		jj_la1[3] = jj_gen;
		break label_1;
	  }
	  jj_consume_token(59);
	  LogicalORExpression();
	  jj_consume_token(60);
	  LogicalORExpression();
				Datum c = (Datum) stack.pop();
				Datum b = (Datum) stack.pop();
				Datum a = (Datum) stack.pop();
				stack.push(DatumMath.conditional(a,b,c));
	}
  }  
  static final public void Constant() throws ParseException {
					Token t;
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case INTEGER_LITERAL:
	case FLOATING_POINT_LITERAL:
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case INTEGER_LITERAL:
		t = jj_consume_token(INTEGER_LITERAL);
		break;
	  case FLOATING_POINT_LITERAL:
		t = jj_consume_token(FLOATING_POINT_LITERAL);
		break;
	  default:
		jj_la1[19] = jj_gen;
		jj_consume_token(-1);
		throw new ParseException();
	  }
				stack.push(new Datum(t.image));
	  break;
	case STRING_LITERAL:
	case CHARACTER_LITERAL:
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case STRING_LITERAL:
		jj_consume_token(STRING_LITERAL);
		break;
	  case CHARACTER_LITERAL:
		jj_consume_token(CHARACTER_LITERAL);
		break;
	  default:
		jj_la1[20] = jj_gen;
		jj_consume_token(-1);
		throw new ParseException();
	  }
				stack.push(new Datum(stringToken));
	  break;
	default:
	  jj_la1[21] = jj_gen;
	  jj_consume_token(-1);
	  throw new ParseException();
	}
  }  
  static final public void Count() throws ParseException {
				 long total;
	jj_consume_token(COUNT);
	jj_consume_token(LP);
	total = TruthTestList();
	jj_consume_token(RP);
				  stack.push(new Datum(total));
  }  
  static final public void Description() throws ParseException {
					   Token t;
	jj_consume_token(DESC);
	jj_consume_token(LP);
	t = jj_consume_token(ID);
	jj_consume_token(RP);
				if (data.containsKey(t.image)) {
						try {
								Node node = data.getNode(t.image);
								stack.push(new Datum(node.getDescription()));
						}
						catch (Exception e) {
								stack.push(new Datum(Datum.INVALID));
						}
				}
				else {
						stack.push(new Datum(Datum.INVALID));
				}
  }  
  static final public void EqualityExpression() throws ParseException {
							  Token op;
	RelationalExpression();
	label_7:
	while (true) {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case EQ:
	  case NEQ:
		;
		break;
	  default:
		jj_la1[8] = jj_gen;
		break label_7;
	  }
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case EQ:
		jj_consume_token(EQ);
		break;
	  case NEQ:
		jj_consume_token(NEQ);
		break;
	  default:
		jj_la1[9] = jj_gen;
		jj_consume_token(-1);
		throw new ParseException();
	  }
													op = token;
	  RelationalExpression();
				Datum b = (Datum) stack.pop();
				Datum a = (Datum) stack.pop();
			if ( op.kind == EQ ) {
						  stack.push(DatumMath.eq(a,b));
						}
			else if (op.kind == NEQ) {
						  stack.push(DatumMath.neq(a,b));
				}
	}
  }  
  static final public void ExclusiveORExpression() throws ParseException {
	ANDExpression();
	label_5:
	while (true) {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case XOR:
		;
		break;
	  default:
		jj_la1[7] = jj_gen;
		break label_5;
	  }
	  jj_consume_token(XOR);
	  ANDExpression();
				Datum b = (Datum) stack.pop();
				Datum a = (Datum) stack.pop();
				stack.push(DatumMath.xor(a,b));
	}
  }  
  static final public void Expression() throws ParseException {
	if (jj_2_1(2)) {
	  AssignmentExpression();
	} else {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case STRING_LITERAL:
	  case CHARACTER_LITERAL:
	  case PLUS:
	  case MINUS:
	  case NOT:
	  case LP:
	  case COUNT:
	  case LIST:
	  case DESC:
	  case UNSET:
	  case INTEGER_LITERAL:
	  case FLOATING_POINT_LITERAL:
	  case ID:
		ConditionalExpression();
		break;
	  default:
		jj_la1[2] = jj_gen;
		jj_consume_token(-1);
		throw new ParseException();
	  }
	}
  }  
  static final public void InclusiveORExpression() throws ParseException {
	ExclusiveORExpression();
	label_4:
	while (true) {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case OR:
		;
		break;
	  default:
		jj_la1[6] = jj_gen;
		break label_4;
	  }
	  jj_consume_token(OR);
	  ExclusiveORExpression();
				Datum b = (Datum) stack.pop();
				Datum a = (Datum) stack.pop();
				stack.push(DatumMath.or(a,b));
	}
  }  
  static final public void LogicalANDExpression() throws ParseException {
	InclusiveORExpression();
	label_3:
	while (true) {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case ANDAND:
		;
		break;
	  default:
		jj_la1[5] = jj_gen;
		break label_3;
	  }
	  jj_consume_token(ANDAND);
	  InclusiveORExpression();
				Datum b = (Datum) stack.pop();
				Datum a = (Datum) stack.pop();
				stack.push(DatumMath.andand(a,b));
	}
  }  
  static final public void LogicalORExpression() throws ParseException {
	LogicalANDExpression();
	label_2:
	while (true) {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case OROR:
		;
		break;
	  default:
		jj_la1[4] = jj_gen;
		break label_2;
	  }
	  jj_consume_token(OROR);
	  LogicalANDExpression();
				Datum b = (Datum) stack.pop();
				Datum a = (Datum) stack.pop();
				stack.push(DatumMath.oror(a,b));
	}
  }  
  static final public void MultiplicativeExpression() throws ParseException {
									Token op;
	UnaryExpression();
	label_10:
	while (true) {
	  if (jj_2_4(2)) {
		;
	  } else {
		break label_10;
	  }
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case MULTIPLY:
		jj_consume_token(MULTIPLY);
		break;
	  case DIVIDE:
		jj_consume_token(DIVIDE);
		break;
	  default:
		jj_la1[13] = jj_gen;
		jj_consume_token(-1);
		throw new ParseException();
	  }
																	 op = token;
	  UnaryExpression();
				Datum b = (Datum) stack.pop();
				Datum a = (Datum) stack.pop();
			if ( op.kind == MULTIPLY ) {
						  stack.push(DatumMath.multiply(a,b));
						}
			else if (op.kind == DIVIDE) {
				stack.push(DatumMath.divide(a,b));
				}
	}
  }  
  static final public void PrimaryExpression() throws ParseException {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case STRING_LITERAL:
	case CHARACTER_LITERAL:
	case INTEGER_LITERAL:
	case FLOATING_POINT_LITERAL:
	  Constant();
	  break;
	case COUNT:
	  Count();
	  break;
	case LIST:
	  StringList();
	  break;
	case DESC:
	  Description();
	  break;
	case UNSET:
	  Unset();
	  break;
	case ID:
	  Variable();
	  break;
	case LP:
	  jj_consume_token(LP);
	  Expression();
	  jj_consume_token(RP);
	  break;
	default:
	  jj_la1[17] = jj_gen;
	  jj_consume_token(-1);
	  throw new ParseException();
	}
  }  
  public void ReInit(QssTokenManager tm) {
	token_source = tm;
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  
  static public void ReInit(java.io.InputStream stream) {
	jj_input_stream.ReInit(stream, 1, 1);
	token_source.ReInit(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  
  static public void ReInit(java.io.Reader stream) {
	jj_input_stream.ReInit(stream, 1, 1);
	token_source.ReInit(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  
  static final public void RelationalExpression() throws ParseException {
								Token op;
	AdditiveExpression();
	label_8:
	while (true) {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case GT:
	  case GE:
	  case LT:
	  case LE:
		;
		break;
	  default:
		jj_la1[10] = jj_gen;
		break label_8;
	  }
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case LT:
		jj_consume_token(LT);
		break;
	  case GT:
		jj_consume_token(GT);
		break;
	  case LE:
		jj_consume_token(LE);
		break;
	  case GE:
		jj_consume_token(GE);
		break;
	  default:
		jj_la1[11] = jj_gen;
		jj_consume_token(-1);
		throw new ParseException();
	  }
															   op = token;
	  AdditiveExpression();
				Datum b = (Datum) stack.pop();
				Datum a = (Datum) stack.pop();
			switch(op.kind) {
				case LT: stack.push(DatumMath.lt(a,b)); break;
				case GT: stack.push(DatumMath.gt(a,b)); break;
				case LE: stack.push(DatumMath.le(a,b)); break;
				case GE: stack.push(DatumMath.ge(a,b)); break;
		   }
	}
  }  
  static final public void StringList() throws ParseException {
					 java.util.Vector v = new java.util.Vector();
	jj_consume_token(LIST);
	jj_consume_token(LP);
	Expression();
							  v.addElement(stack.pop());
	label_11:
	while (true) {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case 61:
		;
		break;
	  default:
		jj_la1[16] = jj_gen;
		break label_11;
	  }
	  jj_consume_token(61);
	  Expression();
									  v.addElement(stack.pop());
	}
	jj_consume_token(RP);
				StringBuffer sb = new StringBuffer();

				/* Remove null strings from list */
				for (int i=0;i<v.size();) {
						if (((Datum) v.elementAt(i)).StringVal().length() == 0) {
								v.removeElementAt(i);
						}
						else {
								++i;
						}
				}

				for (int i=0;i<v.size();++i) {
						if (i > 0) {
								if (i < (v.size()-1)) {
										sb.append(", ");
								}
								else {
										sb.append(" and ");
								}
						}
						sb.append(((Datum) v.elementAt(i)).StringVal());
				}
				stack.push(new Datum(sb.toString()));
  }  
		public String StringVal(Evidence ev, String exp) {
				return parse(ev, exp).StringVal();
		}
  static final public boolean TruthTest() throws ParseException {
	Expression();
				try {
						{if (true) return ((Datum) stack.pop()).booleanVal();}
				} catch (java.util.EmptyStackException e) {
						System.out.println(e.getMessage());
				 }
				{if (true) return false;}
	throw new Error("Missing return statement in function");
  }  
  static final public long TruthTestList() throws ParseException {
						 long count=0; boolean b;
	b = TruthTest();
							if (b) ++count;
	label_12:
	while (true) {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case 61:
		;
		break;
	  default:
		jj_la1[18] = jj_gen;
		break label_12;
	  }
	  jj_consume_token(61);
	  b = TruthTest();
																		if (b) ++count;
	}
																							  {if (true) return count;}
	throw new Error("Missing return statement in function");
  }  
  static final public void UnaryExpression() throws ParseException {
						   Token op;
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case PLUS:
	case MINUS:
	case NOT:
	  op = UnaryOperator();
	  PrimaryExpression();
				switch(op.kind) {
						default:
								break;
						case MINUS: {
								stack.push(DatumMath.neg((Datum) stack.pop()));
						break;
				}
				case NOT: {
						stack.push(DatumMath.not((Datum) stack.pop()));
						break;
				}
			}
	  break;
	case STRING_LITERAL:
	case CHARACTER_LITERAL:
	case LP:
	case COUNT:
	case LIST:
	case DESC:
	case UNSET:
	case INTEGER_LITERAL:
	case FLOATING_POINT_LITERAL:
	case ID:
	  PrimaryExpression();
	  break;
	default:
	  jj_la1[14] = jj_gen;
	  jj_consume_token(-1);
	  throw new ParseException();
	}
  }  
  static final public Token UnaryOperator() throws ParseException {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case PLUS:
	  jj_consume_token(PLUS);
	  break;
	case MINUS:
	  jj_consume_token(MINUS);
	  break;
	case NOT:
	  jj_consume_token(NOT);
	  break;
	default:
	  jj_la1[15] = jj_gen;
	  jj_consume_token(-1);
	  throw new ParseException();
	}
									   {if (true) return token;}
	throw new Error("Missing return statement in function");
  }  
  static final public void Unset() throws ParseException {
				 Token t;
	jj_consume_token(UNSET);
	jj_consume_token(LP);
	t = jj_consume_token(ID);
	jj_consume_token(RP);
				data.unset(t.image);
				stack.push(new Datum(Datum.INVALID));
  }  
  static final public void Variable() throws ParseException {
	jj_consume_token(ID);
				if (data.containsKey(token.image)) {
						Datum d = data.getDatum(token.image);
						stack.push(d);
				}
				else {
						System.out.println("Variable " + token.image + " undefined");
						stack.push(new Datum(Datum.INVALID));
				}
  }  
		public boolean booleanVal(Evidence ev, String exp) {
				return parse(ev, exp).booleanVal();
		}
  static final public void disable_tracing() {
  }  
		public double doubleVal(Evidence ev, String exp) {
				return parse(ev, exp).doubleVal();
		}
  static final public void enable_tracing() {
  }  
  static final public ParseException generateParseException() {
	jj_expentries.removeAllElements();
	boolean[] la1tokens = new boolean[62];
	for (int i = 0; i < 62; i++) {
	  la1tokens[i] = false;
	}
	if (jj_kind >= 0) {
	  la1tokens[jj_kind] = true;
	  jj_kind = -1;
	}
	for (int i = 0; i < 22; i++) {
	  if (jj_la1[i] == jj_gen) {
		for (int j = 0; j < 32; j++) {
		  if ((jj_la1_0[i] & (1<<j)) != 0) {
			la1tokens[j] = true;
		  }
		  if ((jj_la1_1[i] & (1<<j)) != 0) {
			la1tokens[32+j] = true;
		  }
		}
	  }
	}
	for (int i = 0; i < 62; i++) {
	  if (la1tokens[i]) {
		jj_expentry = new int[1];
		jj_expentry[0] = i;
		jj_expentries.addElement(jj_expentry);
	  }
	}
	jj_endpos = 0;
	jj_rescan_token();
	jj_add_error_token(0, 0);
	int[][] exptokseq = new int[jj_expentries.size()][];
	for (int i = 0; i < jj_expentries.size(); i++) {
	  exptokseq[i] = (int[])jj_expentries.elementAt(i);
	}
	return new ParseException(token, exptokseq, tokenImage);
  }  
  static final public Token getNextToken() {
	if (token.next != null) token = token.next;
	else token = token.next = token_source.getNextToken();
	jj_ntk = -1;
	jj_gen++;
	return token;
  }  
  static final public Token getToken(int index) {
	Token t = lookingAhead ? jj_scanpos : token;
	for (int i = 0; i < index; i++) {
	  if (t.next != null) t = t.next;
	  else t = t.next = token_source.getNextToken();
	}
	return t;
  }  
  static final private boolean jj_2_1(int xla) {
	jj_la = xla; jj_lastpos = jj_scanpos = token;
	boolean retval = !jj_3_1();
	jj_save(0, xla);
	return retval;
  }  
  static final private boolean jj_2_2(int xla) {
	jj_la = xla; jj_lastpos = jj_scanpos = token;
	boolean retval = !jj_3_2();
	jj_save(1, xla);
	return retval;
  }  
  static final private boolean jj_2_3(int xla) {
	jj_la = xla; jj_lastpos = jj_scanpos = token;
	boolean retval = !jj_3_3();
	jj_save(2, xla);
	return retval;
  }  
  static final private boolean jj_2_4(int xla) {
	jj_la = xla; jj_lastpos = jj_scanpos = token;
	boolean retval = !jj_3_4();
	jj_save(3, xla);
	return retval;
  }  
  static final private boolean jj_3R_13() {
	if (jj_scan_token(ID)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	if (jj_scan_token(58)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_14() {
	if (jj_3R_22()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_15() {
	if (jj_scan_token(PLUS)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_16() {
	if (jj_scan_token(MINUS)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_17() {
	if (jj_scan_token(DOT)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_18() {
	if (jj_3R_21()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_19() {
	if (jj_scan_token(MULTIPLY)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_20() {
	if (jj_scan_token(DIVIDE)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_21() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_23()) {
	jj_scanpos = xsp;
	if (jj_3R_24()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_22() {
	if (jj_3R_25()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_23() {
	if (jj_3R_26()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_24() {
	if (jj_3R_27()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_25() {
	if (jj_3R_18()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_26() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_28()) {
	jj_scanpos = xsp;
	if (jj_3R_29()) {
	jj_scanpos = xsp;
	if (jj_3R_30()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_27() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_31()) {
	jj_scanpos = xsp;
	if (jj_3R_32()) {
	jj_scanpos = xsp;
	if (jj_3R_33()) {
	jj_scanpos = xsp;
	if (jj_3R_34()) {
	jj_scanpos = xsp;
	if (jj_3R_35()) {
	jj_scanpos = xsp;
	if (jj_3R_36()) {
	jj_scanpos = xsp;
	if (jj_3R_37()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_28() {
	if (jj_scan_token(PLUS)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_29() {
	if (jj_scan_token(MINUS)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_30() {
	if (jj_scan_token(NOT)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_31() {
	if (jj_3R_38()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_32() {
	if (jj_3R_39()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_33() {
	if (jj_3R_40()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_34() {
	if (jj_3R_41()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_35() {
	if (jj_3R_42()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_36() {
	if (jj_3R_43()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_37() {
	if (jj_scan_token(LP)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_38() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_44()) {
	jj_scanpos = xsp;
	if (jj_3R_45()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_39() {
	if (jj_scan_token(COUNT)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_40() {
	if (jj_scan_token(LIST)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_41() {
	if (jj_scan_token(DESC)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_42() {
	if (jj_scan_token(UNSET)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_43() {
	if (jj_scan_token(ID)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_44() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_46()) {
	jj_scanpos = xsp;
	if (jj_3R_47()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_45() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_48()) {
	jj_scanpos = xsp;
	if (jj_3R_49()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_46() {
	if (jj_scan_token(INTEGER_LITERAL)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_47() {
	if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_48() {
	if (jj_scan_token(STRING_LITERAL)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3R_49() {
	if (jj_scan_token(CHARACTER_LITERAL)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3_1() {
	if (jj_3R_13()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3_2() {
	if (jj_scan_token(AND)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	if (jj_3R_14()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3_3() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_15()) {
	jj_scanpos = xsp;
	if (jj_3R_16()) {
	jj_scanpos = xsp;
	if (jj_3R_17()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	if (jj_3R_18()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static final private boolean jj_3_4() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_19()) {
	jj_scanpos = xsp;
	if (jj_3R_20()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	if (jj_3R_21()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  
  static private void jj_add_error_token(int kind, int pos) {
	if (pos >= 100) return;
	if (pos == jj_endpos + 1) {
	  jj_lasttokens[jj_endpos++] = kind;
	} else if (jj_endpos != 0) {
	  jj_expentry = new int[jj_endpos];
	  for (int i = 0; i < jj_endpos; i++) {
		jj_expentry[i] = jj_lasttokens[i];
	  }
	  boolean exists = false;
	  for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
		int[] oldentry = (int[])(enum.nextElement());
		if (oldentry.length == jj_expentry.length) {
		  exists = true;
		  for (int i = 0; i < jj_expentry.length; i++) {
			if (oldentry[i] != jj_expentry[i]) {
			  exists = false;
			  break;
			}
		  }
		  if (exists) break;
		}
	  }
	  if (!exists) jj_expentries.addElement(jj_expentry);
	  if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	}
  }  
  static final private Token jj_consume_token(int kind) throws ParseException {
	Token oldToken;
	if ((oldToken = token).next != null) token = token.next;
	else token = token.next = token_source.getNextToken();
	jj_ntk = -1;
	if (token.kind == kind) {
	  jj_gen++;
	  if (++jj_gc > 100) {
		jj_gc = 0;
		for (int i = 0; i < jj_2_rtns.length; i++) {
		  JJCalls c = jj_2_rtns[i];
		  while (c != null) {
			if (c.gen < jj_gen) c.first = null;
			c = c.next;
		  }
		}
	  }
	  return token;
	}
	token = oldToken;
	jj_kind = kind;
	throw generateParseException();
  }  
  static final private int jj_ntk() {
	if ((jj_nt=token.next) == null)
	  return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	else
	  return (jj_ntk = jj_nt.kind);
  }  
  static final private void jj_rescan_token() {
	jj_rescan = true;
	for (int i = 0; i < 4; i++) {
	  JJCalls p = jj_2_rtns[i];
	  do {
		if (p.gen > jj_gen) {
		  jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
		  switch (i) {
			case 0: jj_3_1(); break;
			case 1: jj_3_2(); break;
			case 2: jj_3_3(); break;
			case 3: jj_3_4(); break;
		  }
		}
		p = p.next;
	  } while (p != null);
	}
	jj_rescan = false;
  }  
  static final private void jj_save(int index, int xla) {
	JJCalls p = jj_2_rtns[index];
	while (p.gen > jj_gen) {
	  if (p.next == null) { p = p.next = new JJCalls(); break; }
	  p = p.next;
	}
	p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }  
  static final private boolean jj_scan_token(int kind) {
	if (jj_scanpos == jj_lastpos) {
	  jj_la--;
	  if (jj_scanpos.next == null) {
		jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	  } else {
		jj_lastpos = jj_scanpos = jj_scanpos.next;
	  }
	} else {
	  jj_scanpos = jj_scanpos.next;
	}
	if (jj_rescan) {
	  int i = 0; Token tok = token;
	  while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	  if (tok != null) jj_add_error_token(kind, i);
	}
	return (jj_scanpos.kind != kind);
  }  
		public long longVal(Evidence ev, String exp) {
				return parse(ev, exp).longVal();
		}
  static final public void one_line() throws ParseException {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case STRING_LITERAL:
	case CHARACTER_LITERAL:
	case PLUS:
	case MINUS:
	case NOT:
	case LP:
	case COUNT:
	case LIST:
	case DESC:
	case UNSET:
	case INTEGER_LITERAL:
	case FLOATING_POINT_LITERAL:
	case ID:
	  Expression();
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case EOL:
		jj_consume_token(EOL);
		break;
	  case 0:
		jj_consume_token(0);
		break;
	  default:
		jj_la1[0] = jj_gen;
		jj_consume_token(-1);
		throw new ParseException();
	  }
	  break;
	case EOL:
	  jj_consume_token(EOL);
	  break;
	case 0:
	  jj_consume_token(0);
	  break;
	default:
	  jj_la1[1] = jj_gen;
	  jj_consume_token(-1);
	  throw new ParseException();
	}
  }  
		public Datum parse(Evidence ev, String exp) {
				Datum d = null;
				this.data = ev;

				try {
						this.ReInit(new java.io.ByteArrayInputStream(exp.getBytes()));
						stack = new java.util.Stack();

						this.one_line();

						d = (Datum) stack.pop();
				}
				catch (java.util.EmptyStackException e) {
						System.out.println("Stack underflow");
				}
				catch (ParseException e) {
						System.out.println("Parse error: " + e.getMessage());
				}
				catch (TokenMgrError e) {
						System.out.println("Tokenization error: " + e.getMessage());
				}
				finally {
						if (d == null)
								return new Datum(Datum.INVALID);
						else
								return d;
				}
		}
		public String parseJSP(Evidence ev, String msg) {
				java.util.StringTokenizer st = new java.util.StringTokenizer(msg,"`",true);
				StringBuffer sb = new StringBuffer();
				String s;
				boolean inside = false;

				while(st.hasMoreTokens()) {
						s = st.nextToken();
						if ("`".equals(s)) {
								inside = (inside) ? false : true;
								continue;
						}
						else {
								if (inside) {
										sb.append(StringVal(ev,s));
								}
								else {
										sb.append(s);
								}
						}
				}
				return sb.toString();
		}
}
