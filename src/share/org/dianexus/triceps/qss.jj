options {
    LOOKAHEAD=1;
    STATIC=false;
}


PARSER_BEGIN(Qss)

import java.io.*;
import java.util.*;

public class Qss {
    private Stack stack;
    private Evidence evidence;
    Logger debugLogger = Logger.NULL;
    Logger errorLogger = Logger.NULL;

	public Datum parse(Evidence ev) {
		evidence = ev;
    	Datum d = Datum.INVALID_DATUM;

		try {
			stack = new Stack();
			Statement();
			d = (Datum) stack.pop();
		}
		catch (EmptyStackException e) {
			error(evidence.lingua.get("stack_underflow"),token.beginLine,token.beginColumn);
		}
		catch (ParseException e) {
			error(e.getMessage());
		}
		catch (TokenMgrError e) {
			error(e.getMessage());
		}

		if (debugLogger != Logger.NULL) {
			debug(null,d);
		}

		return d;
	}

	public void resetErrorCount() {
		errorLogger.reset();
	}

	public String getErrors() { return errorLogger.toString(); }
	public String getDebug() { return debugLogger.toString(); }

	private void error(String s) { error(s,0,0); }

	private void error(String s, int line, int column) {
		errorLogger.println(s,line,column);
	}

	/* Prints stack trace in tab delimited format - operator, arguments, ->, answer */
	private void debug(String s,Datum d) {
		debugLogger.println(((s != null) ? (s + "\t") : "") + "->\t" +
					d.stringVal(true) + "\t" + d.doubleVal() + "\t" + d.dateVal() + "\t" + d.monthVal());
	}

	private String datumValue(Datum d) {
		return ("(" + d.getName() + "," + d.stringVal(true) + ")");
	}

	private String opName(int op) {
		return tokenImage[op].substring(1,tokenImage[op].length()-1);
	}

	private void unaryOp(int op, Object arg1) {
		Datum a = getParam(arg1);
		Datum ans = Datum.INVALID_DATUM;
		switch(op) {
			case PLUS: ans = a; break;
			case MINUS: ans = DatumMath.neg(a); break;
			case NOT: ans = DatumMath.not(a); break;
		}
		stack.push(ans);
		if (debugLogger != Logger.NULL) {
			debug(opName(op) + "\t" + datumValue(a),ans);
		}
	}

	private Datum getParam(Object o) {
		if (o == null)
			return Datum.INVALID_DATUM;
		return (Datum) o;
	}

	private void binaryOp(int op, Object arg2, Object arg1) {
		Datum a = getParam(arg1);
		Datum b = getParam(arg2);
		Datum ans = Datum.INVALID_DATUM;
		switch(op) {
			case PLUS: ans = DatumMath.add(a,b); break;
			case MINUS: ans = DatumMath.subtract(a,b); break;
			case MULTIPLY: ans = DatumMath.multiply(a,b); break;
			case DIVIDE: ans = DatumMath.divide(a,b); break;
			case GT: ans = DatumMath.gt(a,b); break;
			case GE: ans = DatumMath.ge(a,b); break;
			case EQ: ans = DatumMath.eq(a,b); break;
			case NEQ: ans = DatumMath.neq(a,b); break;
			case LT: ans = DatumMath.lt(a,b); break;
			case LE: ans = DatumMath.le(a,b); break;
			case CONCATENATE: ans = DatumMath.concat(a,b); break;
			case ANDAND: ans = DatumMath.andand(a,b); break;
			case OROR: ans = DatumMath.oror(a,b); break;
			case MODULUS: ans = DatumMath.modulus(a,b); break;
			case XOR: ans = DatumMath.xor(a,b); break;
			case AND: ans = DatumMath.and(a,b); break;
			case OR: ans = DatumMath.or(a,b); break;
			case ASSIGN: evidence.set(a.stringVal(),b); ans = evidence.getDatum(a.stringVal()); break;
		}
		stack.push(ans);
		if (debugLogger != Logger.NULL) {
			debug(opName(op) + "\t" + datumValue(a) + "\t" + datumValue(b),ans);
		}
	}

	private void trinaryOp(int op, Object arg3, Object arg2, Object arg1) {
		Datum a = getParam(arg1);
		Datum b = getParam(arg2);
		Datum c = getParam(arg3);
		Datum ans = Datum.INVALID_DATUM;
		switch(op) {
			case QUEST: ans = DatumMath.conditional(a,b,c); break;
		}
		stack.push(ans);
		if (debugLogger != Logger.NULL) {
			debug(opName(op) + "\t" + datumValue(a) + "\t" + datumValue(b) + "\t" + datumValue(c),ans);
		}
	}

	private void functionOp(Token func, Stack params) {
		Datum ans = Datum.INVALID_DATUM;
		ans = evidence.function(func.image, params, func.beginLine, func.beginColumn);
		stack.push(ans);
		if (debugLogger != Logger.NULL) {
			StringBuffer sb = new StringBuffer("function\t" + func.image);
			for (int i=0;i<params.size();++i) {
				Object o = params.elementAt(i);
				if (o == null)
					sb.append("\tnull");
				else if (o instanceof Datum)
					sb.append("\t" + datumValue((Datum) o));
				else if (o instanceof String)
					sb.append("\t" + (String) o);
				else
					sb.append("\t" + o.getClass());
			}
			debug(sb.toString(), ans);
		}
	}
}

PARSER_END(Qss)


TOKEN :
{
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            )
          )
      )*
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* unary operatorrs */
{
	< PLUS: "+" >
|	< MINUS: "-" >
|	< NOT: "!" >

}

TOKEN : /* binary operators */
{
/* |	< PLUS: "+" > */
/* |	< MINUS: "-" > */

	< MULTIPLY: "*" >
|	< DIVIDE: "/" >
|	< GT: ">" >
|	< GE: ">=" >
|	< EQ: "==" >
|	< NEQ: "!=" >
|	< LT: "<" >
|	< LE:	"<=" >
|	< CONCATENATE: "." >
|	< ANDAND: "&&" >
|	< OROR: "||" >
|	< MODULUS: "%" >
|	< XOR: "^" >
|	< AND: "&" >
|	< OR: "|" >
|	< ASSIGN: "=" >
}

TOKEN : /* trinary operators */
{
	< QUEST: "?" >
|	< COLON: ":" >
}

TOKEN : /* separator characters */
{
	< COMMA: "," >
|	< LP: "(" >
|	< RP: ")" >
|	< LSB: "[" >
|	< RSB: "]" >
|	< LCB: "{" >
|	< RCB: "}" >
|	< SEMICOLON: ";" >
}

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN : /* numeric constants */
{
 <INTEGER_LITERAL: <DECIMAL_LITERAL> | <HEX_LITERAL> | <OCTAL_LITERAL> >
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
}

TOKEN : /* Function names */
{
	<  NMTOKEN:	["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
|	< EOL: "\n" >
}

void Statement() : {}
{
	Expressions()
|	<SEMICOLON>
|	<EOL>
|	<EOF>
}

void Expressions() : {}
{
	Expression()
		(
			<COMMA>  Expression()
				{
					Object value = stack.pop();
					stack.pop();	/* throw away the penultimate item on the stack */
					stack.push(value);
				}
		)*
}

void Expression() : {}
{
	LOOKAHEAD(2) AssignmentExpression()
|	ConditionalExpression()
}

void AssignmentExpression(): { Token t; }
{
	<NMTOKEN> { t = token; } <ASSIGN> ConditionalExpression()
    	{
    		binaryOp(ASSIGN,stack.pop(), new Datum(evidence.lingua, t.image,Datum.STRING));
    	}
}

void ConditionalExpression() : {}
{
	LogicalORExpression()
		(
			<QUEST> LogicalORExpression() <COLON> LogicalORExpression()
				{ trinaryOp(QUEST,stack.pop(),stack.pop(),stack.pop()); }
		)*
}

void LogicalORExpression() : {}
{
	LogicalANDExpression()
		(
			<OROR> LogicalANDExpression()
				{ binaryOp(OROR,stack.pop(),stack.pop()); }
		)*
}

void LogicalANDExpression() : {}
{
	InclusiveORExpression()
		(
			<ANDAND> InclusiveORExpression()
				{ binaryOp(ANDAND,stack.pop(),stack.pop()); }
		)*
}

void InclusiveORExpression() : {}
{
	ExclusiveORExpression()
		(
			<OR> ExclusiveORExpression()
				{ binaryOp(OR,stack.pop(),stack.pop()); }
		)*
}

void ExclusiveORExpression() : {}
{
	ANDExpression()
		(
			<XOR> ANDExpression()
				{ binaryOp(XOR,stack.pop(),stack.pop()); }
		)*
}

void ANDExpression() : {}
{
	EqualityExpression()
		( LOOKAHEAD(2)
			<AND> EqualityExpression()
				{ binaryOp(AND,stack.pop(),stack.pop()); }
		)*
}

void EqualityExpression() : { Token op; }
{
	RelationalExpression()
		(
			( <EQ> | <NEQ> ) { op = token; } RelationalExpression()
				{ binaryOp(op.kind,stack.pop(),stack.pop()); }
		)*
}

void RelationalExpression() : { Token op; }
{
	AdditiveExpression()
		(
			( <LT> | <GT> | <LE> | <GE> ) { op = token; } AdditiveExpression()
				{ binaryOp(op.kind,stack.pop(),stack.pop()); }
		)*
}

void AdditiveExpression() : { Token op; }
{
	MultiplicativeExpression()
		( LOOKAHEAD(2)
			( <PLUS> | <MINUS> | <CONCATENATE> ) { op = token;} MultiplicativeExpression()
				{ binaryOp(op.kind,stack.pop(),stack.pop()); }
		)*
}

void MultiplicativeExpression() : { Token op; }
{
	UnaryExpression()
		( LOOKAHEAD(2)
			( <MULTIPLY> | <DIVIDE> ) { op = token; } UnaryExpression()
				{ binaryOp(op.kind,stack.pop(),stack.pop()); }
		)*
}

void UnaryExpression() : { Token op; }
{
	(<PLUS> | <MINUS> | <NOT>) { op = token; } PrimaryExpression()
		{ unaryOp(op.kind,stack.pop()); }
|	PrimaryExpression()
}

void PrimaryExpression() : { }
{
	LOOKAHEAD(2) Function()
|	Constant()
|	<NMTOKEN>
		{
			Datum d = evidence.getDatum(token.image);
			if (d == null) {
				error(evidence.lingua.get("undefined_variable") + " '" + token.image + "'", token.beginLine, token.beginColumn);
				stack.push(Datum.INVALID_DATUM);
			}
			else {
				stack.push(d);
			}
		}
|	<LP> Expressions() <RP>
|	<LCB> Expressions() <RCB>
|	<LSB> Expressions() <RSB>
}

void Constant() : { }
{
	( <INTEGER_LITERAL> |<FLOATING_POINT_LITERAL> )
		{ stack.push(new Datum(evidence.lingua, token.image,Datum.NUMBER)); }
|	( <STRING_LITERAL> | <CHARACTER_LITERAL> )
		{
			/* replace special characters before storing value */
			StringBuffer sb = new StringBuffer();
			char c;
			int i=0;

			try {
				for (i=1;i<token.image.length()-1;++i) {
					c = token.image.charAt(i);
					if (c == '\\') {
						c = token.image.charAt(++i);
						switch (c) {
							case 'b': sb.append('\b'); break;
							case 'f': sb.append('\f'); break;
							case 'n': sb.append('\n'); break;
							case 'r': sb.append('\n'); break;
							case 't': sb.append('\t'); break;
							case '\'': sb.append('\''); break;
							case '\"': sb.append('\"'); break;
							case '\\': sb.append('\\'); break;
							default: sb.append(c); break;
						}
					}
					else {
						sb.append(c);
					}
				}
			}
			catch (IndexOutOfBoundsException e) {
				error(evidence.lingua.get("unterminated_escaped_character"), token.beginLine, token.beginColumn + i);
			}

			stack.push(new Datum(evidence.lingua, sb.toString(),Datum.STRING));
		}
}

void Function() : { Token t; Stack params; }
{
	<NMTOKEN> { t = token; } <LP> ( params = FunctionParameters()) <RP>
		{
			functionOp(t,params);
		}
}

Stack FunctionParameters() : { Stack params = new Stack(); }
{
	Expression()
		{ params.push(stack.pop()); }
	(
		"," Expression()
			{ params.push(stack.pop()); }
	)*
		{ return params; }
|	/* empty */
	{ return params; }
}
