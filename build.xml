<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->


<project name="dialogix" default="compile" basedir=".">


<!-- ===================== Property Definitions =========================== -->

<!--

  Each of the following properties are used in the build script.t
  Values for these properties are set by the first place they are
  defined, from the following list:
  * Definitions on the "ant" command line (ant -Dtomcat.home=xyz compile)
  * Definitions from a "build.properties" file in the top level
    source directory
  * Definitions from a "build.properties" file in the developer's
    home directory
  * Default definitions in this build.xml file

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.

-->



<!-- ==================== File and Directory Names ======================== -->

<!--

  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  app.name             Base name of this application, used to
                       construct filenames and directories.
                       Defaults to "myapp".

  app.version          Version identifier for this application.

  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".

  tomcat.home        The directory in which you have installed
                       a binary distribution of Tomcat 4.  This will
                       be used by the "deploy" target.

  deploy.home          The name of the directory into which the
                       deployment hierarchy will be created, and into
                       which the build directory will be copied.
                       Defaults to "${tomcat.home}/webapps/${app.name}".

  dist.home            The name of the base directory in which
                       distribution files are created.
                       Defaults to "dist".
                       
  tomcat.version		The version of tomcat to use:  tomcat_3_2_x, tomcat_3_3_x, tomcat_4_0_x, tomcat_4_1_x
  					   they all have different directory structures for bin, lib, and conf                   

-->

  <property file="build.properties"  />  
  <property file="${build.license_file}" />
  
  <!-- Static properties - Do not change these -->
  <property name="dialogix.version_major" value="2.9"/>
  <property name="dialogix.version_minor" value="9.3.2"/>
  <property name="tomcat.home" value="/${zip.basedir}"/>
  <property name="dialogix.dir" value="${tomcat.home}/webapps/"/>
  <property name="win98.desktop" value="Windows/Desktop"/>
  <property name="win2000.desktop" value="Documents and Settings/All Users/Desktop"/>


  <property name="app.name"      value="dialogix"/>
  <property name="build.home"    value="build"/>
  <property name="deploy.home"   value="${tomcat.home}/webapps/"/>
  <property name="dist.home"     value="dist"/>
  <property name="app.version"	 value="${dialogix.version_major}.${dialogix.version_minor}"/>

  
  <!-- Note that .basedir must not include initial /, else zip file doesn't match it -->
  
  <!--
  <property name="tomcat.version"	value="3.2"/>
  <property name="tomcat.home"   value="/usr/local/dialogix"/> 
  <property name="zip.basedir"		value="usr/local/dialogix" />	
  <property name="cvs.basedir"	value="cvs2/Dialogix" />
  <property name="dialogix.dir"	value="${tomcat.home}/webapps/"/>
  <property name="floppy.dir" value="../archive/" />  
  <property name="compile.target"    value="1.2"/>
	-->
	

<!--  ==================== Compilation Control Options ==================== -->

<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>
  <!--
  <property name="build.compiler"		value="jikes"/>
  -->
 


<!-- ==================== External Dependencies =========================== -->


<!--

  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  Because we will automatically include all of the Java classes that Tomcat 4
  exposes to web applications, we will not need to explicitly list any of those
  dependencies.  You only need to worry about external dependencies for JAR
  files that you are going to include inside your "/WEB-INF/lib" directory.

-->


<!-- ==================== Compilation Classpath =========================== -->

<!--

  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.

-->

  <path id="compile.classpath">

    <!-- Include all JAR files that will be included in /WEB-INF/lib -->
    <!-- these are for Tomcat 4.0 -->
    <fileset dir="src/tomcat_4_0_x/common/lib">
      <include name="*.jar" if="using.tomcat_4_0"/>
    </fileset>
    
    <!-- these are for Tomcat 3.3 -->
    <fileset dir="src/tomcat_3_3_x/lib/common">
      <include name="*.jar" if="using.tomcat_3_3"/>
    </fileset>
    <fileset dir="src/tomcat_3_3_x/lib/apps">
      <include name="*.jar" if="using.tomcat_3_3"/>
    </fileset>    

    <!-- these are for Tomcat 3.2 -->
    <fileset dir="src/tomcat_3_2_x/lib">
    	<include name="*.jar" if="using.tomcat_3_2"/>
    </fileset>
    
    <!-- these are used for all -->
    <fileset dir="src/share-lib">
    	<include name="*.jar"/>
    </fileset>
    
  </path>  



<!-- ==================== All Target ====================================== -->

<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

  <target name="all" depends="clean,compile,deploy"
   description="Clean build and dist, then compile and deploy"/>



<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${deploy.home}"/>
    <delete dir="${tomcat.home}"/>
  </target>



<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

  <target name="compile" depends="prepare"
   description="Compile Java sources">
   
   <!-- remove source files, since always re-parsed -->
    <copy  todir="${build.home}/src/" filtering="true">
	    <fileset dir="src/share">
	    	<include name="**/*.java" />
	    </fileset>
       <filterset begintoken="@@" endtoken="@@">
         <filter token="DIALOGIX.AUTHORABLE" value="${dialogix.authorable}"/>
         <filter token="DIALOGIX.DEPLOYABLE" value="${dialogix.deployable}"/>
         <filter token="DIALOGIX.WEB_SERVER" value="${dialogix.web_server}"/>
         <filter token="DIALOGIX.XML" value="${dialogix.xml}"/>
         <filter token="DIALOGIX.VERSION_MAJOR" value="${dialogix.version_major}"/>
         <filter token="DIALOGIX.VERSION_MINOR" value="${dialogix.version_minor}"/>
         <filter token="LICENSE.STUDY_ALIAS" value="${LICENSE.STUDY_ALIAS}"/>
         <filter token="LICENSE.STUDY_NAME" value="${LICENSE.STUDY_NAME}"/>
         <filter token="LICENSE.STUDY_ICON" value="${LICENSE.STUDY_ICON}"/>
         <filter token="LICENSE.PRINCIPAL_INVESTIGATOR" value="${LICENSE.PRINCIPAL_INVESTIGATOR}"/>
         <filter token="LICENSE.GRANT_NAME" value="${LICENSE.GRANT_NAME}"/>
         <filter token="LICENSE.GRANT_TITLE" value="${LICENSE.GRANT_TITLE}"/>
         <filter token="SUPPORT.PHONE" value="${SUPPORT.PHONE}"/>
         <filter token="SUPPORT.EMAIL" value="${SUPPORT.EMAIL}"/>
         <filter token="SUPPORT.PERSON" value="${SUPPORT.PERSON}"/>
         <filter token="DIALOGIX.DB_FOR_LOGIN" value="${dialogix.db_for_login}"/>
         <filter token="DIALOGIX.DB_TRACK_LOGINS" value="${dialogix.db_track_logins}"/>
         <filter token="DIALOGIX.DB_LOG_RESULTS" value="${dialogix.db_log_results}"/>
       </filterset>
    </copy>
    
    <!-- By default, copy the JDK1.1 compatible files -->
    <copy  todir="${build.home}/src/">
      <fileset dir="src/jdk11">
        <include name="**/*.java" if="jdk11.present" />
      </fileset>        
    </copy>
    
    <!-- Then, overwrite them with the JDK1.2 compatible files -->
    <copy  todir="${build.home}/src/">
      <fileset dir="src/jdk12">
        <include name="**/*.java" if="jdk12.present" />
      </fileset>
    </copy>  
    
    <mkdir    dir="${build.home}/classes"/>
    <javac srcdir="${build.home}/src"
          destdir="${build.home}/classes"
           debug="${compile.debug}"
     deprecation="${compile.deprecation}"
        optimize="${compile.optimize}"
        target="${compile.target}">
        <classpath refid="compile.classpath"/>
    </javac>

    <!-- Copy associated resource files -->
    <copy  todir="${build.home}/classes">
    <fileset dir="src/share" includes="**/*.properties"/>
    </copy>
    
    <copy  todir="${build.home}/xml">
    <fileset dir="xml" />
    </copy>
    
    <!--
    <copy  todir="${build.home}/perl">
    <fileset dir="perl" />
    </copy>
    -->
    
  </target>



<!-- ==================== Deploy Target =================================== -->

<!--

  The "deploy" target copies the contents of the build directory into a
  location required by our servlet container, and picks up any external
  dependencies along the way.  AFter restarting the servlet container, you
  can now test your web application.

-->

  <target name="deploy" depends="compile"
   description="Deploy application to servlet container">
   
    <mkdir dir="${deploy.home}"/>
    <mkdir dir="${tomcat.home}"/>
    
    	<!-- copy tomcat specific files to the appropriate target locations -->    
     <copy    todir="${tomcat.home}/archive">
     	<fileset dir="src/archive" includes="**"/>
    </copy>
    <copy    todir="${tomcat.home}/logs">
     	<fileset dir="src/logs" includes="**"/>
    </copy>   

    <!-- Copy the contents of the build directory -->
     <copy toDir="${deploy.home}/" filtering="true">
      <fileset dir="${build.home}/web">
      	<include name="ROOT/**/web.xml"/>
      	<include name="images/**/web.xml"/>
      	<include name="${LICENSE.PACKAGE_DIR}/**/web.xml"/>
      </fileset>
       <filterset begintoken="@@" endtoken="@@">
         <filter token="DIALOGIX.DIR" value="${dialogix.dir}"/>
         <filter token="FLOPPY.DIR" value="${floppy.dir}"/>
		 <filter token="TOMCAT.HOME" value="${tomcat.home}"/>
         <filter token="DB.COMMENT_START" value="${DB.COMMENT_START}"/>
         <filter token="DB.COMMENT_END" value="${DB.COMMENT_END}"/>		   
       </filterset>
     </copy>
     
     <!-- allow customization of htm(l) and jsp pages - especially for switching between SSL and regular access -->
     <copy toDir="${deploy.home}/" filtering="true">
      <fileset dir="${build.home}/web">
      	<include name="${LICENSE.PACKAGE_DIR}/*.htm"/>
      	<include name="${LICENSE.PACKAGE_DIR}/*.html"/>
      	<include name="${LICENSE.PACKAGE_DIR}/*.jsp"/>
      </fileset>
       <filterset begintoken="@@" endtoken="@@">
         <filter token="HTTP.PORT" value="${http.port}"/>
         <filter token="HTTPS.PORT" value="${https.port}"/>
         <filter token="DEPLOY.HOSTNAME" value="${deploy.hostname}"/>
         <filter token="DIALOGIX.VERSION" value="${app.version}"/>
       </filterset>
     </copy>         
     
     <copy toDir="${deploy.home}/" >
      <fileset dir="${build.home}/web" >
      	<include name="ROOT/**"/>
      	<include name="images/**"/>
      	<include name="${LICENSE.PACKAGE_DIR}/**"/>
      	<exclude name="**/web.xml"/>
      </fileset>
     </copy>           
     
     <!-- copy the server.xml files, converting the port values as needed -->
     <copy toDir="${tomcat.home}/conf" filtering="true">
		<fileset dir="src/tomcat_3_2_x/conf">
			<include name="server.xml" if="using.tomcat_3_2"/>
		</fileset>
		<fileset dir="src/tomcat_3_3_x/conf">
			<include name="server.xml" if="using.tomcat_3_3"/>
		</fileset>
		<fileset dir="src/tomcat_4_0_x/conf">
			<include name="server.xml" if="using.tomcat_4_0"/>
		</fileset>
       <filterset begintoken="@@" endtoken="@@"> 
         <filter token="HTTP.PORT" value="${http.port}"/>
         <filter token="HTTPS.PORT" value="${https.port}"/>
         <filter token="AJP12.PORT" value="${ajp12.port}"/>
         <filter token="AJP13.PORT" value="${ajp13.port}"/>
         <filter token="SSL.COMMENT_START" value="${SSL.COMMENT_START}"/>
         <filter token="SSL.COMMENT_END" value="${SSL.COMMENT_END}"/>
         <filter token="SSL.KEYSTORE" value="${SSL.KEYSTORE}"/>
         <filter token="SSL.KEYPASS" value="${SSL.KEYPASS}"/>
         <filter token="TOMCAT.HOME" value="${tomcat.home}"/>
         <filter token="DB.COMMENT_START" value="${DB.COMMENT_START}"/>
         <filter token="DB.COMMENT_END" value="${DB.COMMENT_END}"/>
       </filterset>
     </copy>       

	<!-- copy tomcat specific files to the appropriate target locations -->    
     <copy    todir="${tomcat.home}/">
     	<fileset dir="src/tomcat_3_2_x">
     		<include name="**" if="using.tomcat_3_2"/>
     	</fileset>
     	<fileset dir="src/tomcat_3_3_x">
     		<include name="**" if="using.tomcat_3_3"/>
     	</fileset>
     	<fileset dir="src/tomcat_4_0_x">
     		<include name="**" if="using.tomcat_4_0"/>
     	</fileset>
    </copy>         

    <!-- Copy external dependencies as required -->
    
   <!-- Tomcat 3.3 puts common jar files into /lib/app -->
    <mkdir dir="${tomcat.home}/lib/apps"/>	<!-- just in case needed -->
    <jar jarfile="${tomcat.home}/lib/apps/${app.name}.jar" whenempty="skip">
         <fileset dir="${build.home}/classes">
         	<include name="**" if="using.tomcat_3_3"/>
         </fileset>
    </jar>
    
    <!-- Copy shared libraries -->
    <copy todir="${tomcat.home}/lib/apps">
    	<fileset dir="src/share-lib">
    		<include name="*.jar" if="using.tomcat_3_3"/>
    	</fileset>
    </copy>
    
    <copy todir="${tomcat.home}/lib">
    	<fileset dir="src/share-lib">
    		<include name="*.jar" if="using.tomcat_3_2"/>
    		<include name="*.jar" if="using.tomcat_4_0"/>
    	</fileset>
    </copy>
    
    
    <!-- Make Tomcat-specific directories (so that build doesn't fail) - delete them later if empty -->
    <mkdir dir="${tomcat.home}/lib/common"/>	<!-- in case needed for Tomcat 3.3 -->
    <mkdir dir="${tomcat.home}/common/lib"/>	<!-- in case needed for Tomcat 4.0 -->

    <!-- Copy ssl libraries -->
    <copy todir="${tomcat.home}/lib/common">
    	<fileset dir="src/ssl-lib">
    		<include name="*.jar" if="using.tomcat_3_3.ssl"/>
    	</fileset>
    </copy>
    
    <copy todir="${tomcat.home}/lib">
    	<fileset dir="src/ssl-lib">
    		<include name="*.jar" if="using.tomcat_3_2.ssl"/>
    	</fileset>
    </copy>    
    
    <copy todir="${tomcat.home}/common/lib">
    	<fileset dir="src/ssl-lib">
    		<include name="*.jar" if="using.tomcat_4_0.ssl"/>
    	</fileset>
    </copy>
    
    <!-- delete dirs that are not pertinent to a given distro -->    
    
    <delete includeEmptyDirs="true">
    	<fileset dir="${tomcat.home}/lib/apps">
    		<include name="**" if="using.tomcat_3_2"/>
    		<include name="**" if="using.tomcat_4_0"/>
    	</fileset>
    </delete>
    
    <delete includeEmptyDirs="true">
    	<fileset dir="${tomcat.home}/common/lib">
    		<include name="**" if="using.tomcat_3_2"/>
    		<include name="**" if="using.tomcat_3_3"/>
    	</fileset>
    </delete>    
    
    <!-- Tomcat 3.2 puts common jar files into /lib -->
    <!-- Tomcat 4.0 puts common jar files into /lib -->
	<jar jarfile="${tomcat.home}/lib/${app.name}.jar" whenempty="skip">
         <fileset dir="${build.home}/classes">
         	<include name="**" if="using.tomcat_3_2"/>
         	<include name="**" if="using.tomcat_4_0"/>
         </fileset>
    </jar>	
    
    <delete includeEmptyDirs="true">
    	<fileset dir="${tomcat.home}/lib/common">
    		<include name="**" if="using.tomcat_3_2"/>
    		<include name="**" if="using.tomcat_4_0"/>
    	</fileset>
    </delete> 
    
    <delete includeEmptyDirs="true">
    	<fileset dir="${tomcat.home}/lib">
    		<include name="${app.name}.jar" if="using.tomcat_3_3"/>
    	</fileset>
    </delete>
    
    <!-- make Windows desktop links -->
    <mkdir dir="/${win98.desktop}"/>
	<copy    todir="/${win98.desktop}/">
		<fileset dir="src/Win98/Desktop">
			<include name="**" if="using.win98"/>
		</fileset>
	</copy>
	
    <mkdir dir="/${win2000.desktop}"/>
	<copy    todir="/${win2000.desktop}/">
		<fileset dir="src/Win2000/Desktop">
			<include name="**" if="using.win2000"/>
		</fileset>
	</copy>
	
    <copy  todir="${tomcat.home}" filtering="true">
	    <fileset dir="src">
	    	<include name="License.txt" />
	    </fileset>
       <filterset begintoken="@@" endtoken="@@">
         <filter token="DIALOGIX.VERSION_MAJOR" value="${dialogix.version_major}"/>
         <filter token="DIALOGIX.VERSION_MINOR" value="${dialogix.version_minor}"/>
         <filter token="LICENSE.STUDY_ALIAS" value="${LICENSE.STUDY_ALIAS}"/>
         <filter token="LICENSE.STUDY_NAME" value="${LICENSE.STUDY_NAME}"/>
         <filter token="LICENSE.STUDY_ICON" value="${LICENSE.STUDY_ICON}"/>
         <filter token="LICENSE.PRINCIPAL_INVESTIGATOR" value="${LICENSE.PRINCIPAL_INVESTIGATOR}"/>
         <filter token="LICENSE.GRANT_NAME" value="${LICENSE.GRANT_NAME}"/>
         <filter token="LICENSE.GRANT_TITLE" value="${LICENSE.GRANT_TITLE}"/>
       </filterset>
    </copy>	
    
    <copy todir="${tomcat.home}">
    	<fileset dir="src">
    		<include name="*.ico"/>
    	</fileset>
    </copy>
    
    <copy todir="${tomcat.home}">
    	<fileset dir="src/Win98">
    		<include name="*.pif" if="using.win98"/>
    	</fileset>
    </copy>
    
    <copy  todir="${tomcat.home}" filtering="true">
	    <fileset dir="src">
	    	<include name="dialogix.bat" />
	    	<include name="README.txt" />
	    	<include name="view_working_dir.bat" />
	    	<include name="view_completed_dir.bat" />
	    </fileset>
       <filterset begintoken="@@" endtoken="@@">
         <filter token="DIALOGIX.START_DIR" value="${dialogix.start_dir}"/>
         <filter token="DIALOGIX.VERSION_MAJOR" value="${dialogix.version_major}"/>
         <filter token="DIALOGIX.VERSION_MINOR" value="${dialogix.version_minor}"/>
         <filter token="LICENSE.STUDY_ALIAS" value="${LICENSE.STUDY_ALIAS}"/>
         <filter token="LICENSE.STUDY_NAME" value="${LICENSE.STUDY_NAME}"/>
         <filter token="LICENSE.STUDY_ICON" value="${LICENSE.STUDY_ICON}"/>
         <filter token="LICENSE.PRINCIPAL_INVESTIGATOR" value="${LICENSE.PRINCIPAL_INVESTIGATOR}"/>
         <filter token="LICENSE.GRANT_NAME" value="${LICENSE.GRANT_NAME}"/>
         <filter token="LICENSE.GRANT_TITLE" value="${LICENSE.GRANT_TITLE}"/>
		   <filter token="DIALOGIX.HOME" value="${DIALOGIX.HOME}"/>
         <filter token="LICENSE.PACKAGE_DIR" value="${LICENSE.PACKAGE_DIR}"/>
		   <filter token="ARCHIVE.DIR" value="${ARCHIVE.DIR}"/>
		   <filter token="ZIP.NAME" value="${zip.name}"/>
			<filter token="WORKING.DIR" value="${WORKING.DIR}"/>
			<filter token="COMPLETED.DIR" value="${COMPLETED.DIR}"/>		 
         <filter token="HTTP.PORT" value="${http.port}"/>
         <filter token="HTTPS.PORT" value="${https.port}"/>	
		   <filter token="TOMCAT.HOME" value="${tomcat.home}"/>
       </filterset>
    </copy>	
    
    <!--
    <copy todir="${tomcat.home}/bin">
    	<fileset dir=".">
    		<include name="jikes.exe" if="using.win98" />
    		<include name="jikes.exe" if="using.win2000" />
    	</fileset>
    </copy>
    -->
    
    <!-- Copy the custom keystores to the proper location -->
    <copy todir="${tomcat.home}">
    	<fileset dir="./keystores">
    		<include name="*.keystore"/>
    	</fileset>
    </copy>
    
  </target>



<!-- ==================== Dist Target ===================================== -->


<!--

  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:
  * "deploy" so that the entire web application (including external
    dependencies) will have been assembled
  * "javadoc" so that the application Javadocs will have been created

-->

  <target name="dist" depends="deploy,javadoc"
   description="Create binary distribution">
   
    <mkdir dir="${dist.home}"/>
    
    <!-- Create application Zip file -->
    <zip zipfile="${dist.home}/${zip.name}.zip"
         basedir="/">
      <include name="${zip.basedir}/**"/>
		<include name="${win98.desktop}/Dialogix/**" if="using.win98"/>    																																																																																																																								
		<include name="${win2000.desktop}/Dialogix/**" if="using.win2000"/>																																																																																																																																										
    </zip>
    
    <!-- Create INNO installer script -->
    
    <mkdir dir="${dist.home}/${zip.name}"/>
    
    <copy  todir="${dist.home}/${zip.name}" filtering="true" flatten="true">
	    <fileset dir="src">
	    	<include name="Win98/Dialogix-install-script.iss" if="using.win98"/>
	    	<include name="Win2000/Dialogix-install-script.iss" if="using.win2000"/>
	    </fileset>
       <filterset begintoken="@@" endtoken="@@">
		 <filter token="DIALOGIX.HOME" value="${DIALOGIX.HOME}"/>
         <filter token="DIALOGIX.VERSION_MAJOR" value="${dialogix.version_major}"/>
         <filter token="DIALOGIX.VERSION_MINOR" value="${dialogix.version_minor}"/>
         <filter token="LICENSE.STUDY_ALIAS" value="${LICENSE.STUDY_ALIAS}"/>
         <filter token="LICENSE.STUDY_NAME" value="${LICENSE.STUDY_NAME}"/>
         <filter token="LICENSE.STUDY_ICON" value="${LICENSE.STUDY_ICON}"/>
         <filter token="LICENSE.PRINCIPAL_INVESTIGATOR" value="${LICENSE.PRINCIPAL_INVESTIGATOR}"/>
         <filter token="LICENSE.GRANT_NAME" value="${LICENSE.GRANT_NAME}"/>
         <filter token="LICENSE.GRANT_TITLE" value="${LICENSE.GRANT_TITLE}"/>                  
       </filterset>
    </copy>
    <move file="${dist.home}/${zip.name}/Dialogix-install-script.iss" tofile="${dist.home}/${zip.name}/${zip.name}-install-script.iss"/>
    
   <!-- this is hard-coded to the default Inno Setup install directory --> 
	<exec dir="${dist.home}/${zip.name}" executable="C:\Program Files\Inno Setup 2\Compil32.exe" os="Windows 98,Windows 2000"
		failonerror="true" timeout="60000">
		<arg line="/cc ${zip.name}-install-script.iss"/>
	</exec>
	
	<move file="${dist.home}/${zip.name}/Output/setup.exe" tofile="${dist.home}/${zip.name}/${zip.name}.exe"/>
	<delete dir="${dist.home}/${zip.name}/Output"/>

  </target>
  
  <target name="zip_dist" depends="deploy,javadoc"
   description="Create binary distribution for Unix platforms">
   
    <mkdir dir="${dist.home}"/>
    <!-- Create application Zip file -->
    <zip zipfile="${dist.home}/${zip.name}.zip"
         basedir="/">
		<include name="${zip.basedir}/archive/**"/>
		<include name="${zip.basedir}/bin/**"/>
		<include name="${zip.basedir}/conf/**"/>
		<include name="${zip.basedir}/lib/**"/>
		<include name="${zip.basedir}/webapps/${LICENSE.PACKAGE_DIR}/**"/>
		<include name="${zip.basedir}/webapps/ROOT/**"/>
		<include name="${zip.basedir}/webapps/images/**"/>                         																																																																																																																								
		<include name="${win98.desktop}/Dialogix/**" if="using.win98"/>    																																																																																																																								
		<include name="${win2000.desktop}/Dialogix/**" if="using.win2000"/>																																																																																																																																										
    </zip>
 </target>
  
<!-- ==================== Src Target ===================================== -->


<!--

  The "src" target creates a jar of all of the source files for the package

-->

  <target name="src" depends=""
   description="Create src distribution">
   
    <!-- backup project source -->
    <mkdir dir="${dist.home}"/>
    
    <jar jarfile="${dist.home}/${app.name}_${app.version}-src.jar" basedir="/">
		<include name="${cvs.basedir}/**"/>
       <exclude name="${cvs.basedir}/${build.home}/**"/>
        <exclude name="${cvs.basedir}/${dist.home}/**"/>
    </jar>
  </target>



<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

  <target name="javadoc" depends="compile"
   description="Create Javadoc API documentation">
   <!--

    <mkdir          dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="src"
                destdir="${dist.home}/docs/api"
           packagenames="mypackage.*"/>
   -->
  </target>



<!-- ==================== Prepare Target ================================== -->

<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

-->

  <target name="prepare" depends="detect">

    <!-- Create build directory and copy static content -->
    <mkdir  dir="${build.home}"/>

    <echo message="compile.target=${compile.target}"/>
    <echo message="tomcat.home=${tomcat.home}"/>
    <echo message="dialogix.dir=${dialogix.dir}"/>
    <echo message="floppy.dir=${floppy.dir}"/>
    <echo message="tomcat.version=${tomcat.version}"/>
    <echo message="zip.basedir=${zip.basedir}"/>
    <echo message="cvs.basedir=${cvs.basedir}"/>
    <echo message="deploy.hostname=${deploy.hostname}"/>
    <echo message="deploy.os=${deploy.os}"/>
    <echo message="dialogix.authorable=${dialogix.authorable}"/>
    <echo message="dialogix.deployable=${dialogix.deployable}"/>
    <echo message="dialogix.web_server=${dialogix.web_server}"/>
    <echo message="dialogix.version_major=${dialogix.version_major}"/>
    <echo message="dialogix.version_minor=${dialogix.version_minor}"/>
    <echo message="dialogix.xml=${dialogix.xml}"/>
    <echo message="http.port=${http.port}"/>
    <echo message="https.port=${https.port}"/>
    <echo message="ajp12.port=${ajp12.port}"/>
    <echo message="ajp13.port=${ajp13.port}"/>
    <echo message="SSL.KEYSTORE=${SSL.KEYSTORE}"/>
    <echo message="SUPPORT.PHONE=${SUPPORT.PHONE}"/>
    <echo message="SUPPORT.EMAIL=${SUPPORT.EMAIL}"/>
    <echo message="SUPPORT.PERSON=${SUPPORT.PERSON}"/>    

    
    <echo message="LICENSE.PACKAGE_DIR=${LICENSE.PACKAGE_DIR}"/>
    <echo message="LICENSE.STUDY_ALIAS=${LICENSE.STUDY_ALIAS}"/>
    <echo message="LICENSE.STUDY_NAME=${LICENSE.STUDY_NAME}"/>
    <echo message="LICENSE.STUDY_ICON=${LICENSE.STUDY_ICON}"/>
    <echo message="LICENSE.PRINCIPAL_INVESTIGATOR=${LICENSE.PRINCIPAL_INVESTIGATOR}"/>
    <echo message="LICENSE.GRANT_NAME=${LICENSE.GRANT_NAME}"/>
    <echo message="LICENSE.GRANT_TITLE=${LICENSE.GRANT_TITLE}"/>
    <echo message="DIALOGIX.HOME=${DIALOGIX.HOME}"/>
    <!-- Copy static files from external dependencies as needed -->
    
    <copy toDir="${build.home}/web" >
      <fileset dir="web" >
      	<include name="ROOT/**"/>
      	<include name="images/**"/>
      	<include name="${LICENSE.PACKAGE_DIR}/**"/>
      </fileset>
     </copy>
     
    <copy toDir="${build.home}/web" >
      <fileset dir="web-test" >
      	<include name="${LICENSE.PACKAGE_DIR}/**"/>
      </fileset>
     </copy>     

  </target>
  
  <target name="detect">
      <condition property="jdk12.present">
    	<and>
    		<available classname="java.security.PrivilegedAction"/>
    		<not>
    			<equals arg1="${compile.target}" arg2="1.1" />
    		</not>
    	</and>
    </condition>
    
    <condition property="jdk11.present">
		<equals arg1="${compile.target}" arg2="1.1" />
    </condition>    
    
    <condition property="using.tomcat_3_2">
    	<equals arg1="${tomcat.version}" arg2="3.2" />
    </condition>
    
    <condition property="using.tomcat_3_3">
    	<equals arg1="${tomcat.version}" arg2="3.3" />
    </condition>    
    
    <condition property="using.tomcat_4_0">
    	<equals arg1="${tomcat.version}" arg2="4.0" />
    </condition>
    
    <!-- these address SSL needs-->
    <condition property="dialogix.ssl_role" value="with_ssl">
    	<equals arg1="${SSL.USE}" arg2="true" />
    </condition>
    <condition property="dialogix.ssl_role" value="no_ssl">
    	<equals arg1="${SSL.USE}" arg2="false" />
    </condition>
        
    <condition property="SSL.COMMENT_START" value="&lt;!--">
    	<equals arg1="${SSL.USE}" arg2="false" />
    </condition>
    
    <condition property="SSL.COMMENT_START" value="&lt;!-- --&gt;">
    	<equals arg1="${SSL.USE}" arg2="true" />
    </condition>  
    
    <condition property="SSL.COMMENT_END" value="--&gt;">
    	<equals arg1="${SSL.USE}" arg2="false" />
    </condition>
    
    <condition property="SSL.COMMENT_END" value="&lt;!-- --&gt;">
    	<equals arg1="${SSL.USE}" arg2="true" />
    </condition>   
    
    
    <!-- these are for DB needs -->
    <condition property="dialogix.db_role" value="with_db">
    	<equals arg1="${DB.USE}" arg2="true" />
    </condition>
    <condition property="dialogix.db_role" value="no_db">
    	<equals arg1="${DB.USE}" arg2="false" />
    </condition>  
    
    <condition property="DB.COMMENT_START" value="&lt;!--">
    	<equals arg1="${DB.USE}" arg2="false" />
    </condition>
    
    <condition property="DB.COMMENT_START" value="&lt;!-- --&gt;">
    	<equals arg1="${DB.USE}" arg2="true" />
    </condition>  
    
    <condition property="DB.COMMENT_END" value="--&gt;">
    	<equals arg1="${DB.USE}" arg2="false" />
    </condition>
    
    <condition property="DB.COMMENT_END" value="&lt;!-- --&gt;">
    	<equals arg1="${DB.USE}" arg2="true" />
    </condition>               
    
    <condition property="using.tomcat_3_2.ssl">
    	<and>
    		<equals arg1="${tomcat.version}" arg2="3.2" />
    		<equals arg1="${SSL.USE}" arg2="true" />
    	</and>
    </condition>
    
    <condition property="using.tomcat_3_3.ssl">
    	<and>
    		<equals arg1="${tomcat.version}" arg2="3.3" />
    		<equals arg1="${SSL.USE}" arg2="true" />
    	</and>
    </condition>    
    
    <condition property="using.tomcat_4_0.ssl">
    	<and>
	    	<equals arg1="${tomcat.version}" arg2="4.0" />
    		<equals arg1="${SSL.USE}" arg2="true" />
    	</and>
    </condition>         
    
    <condition property="using.win98">
    	<equals arg1="${deploy.os}" arg2="win98" />
    </condition>    
    <condition property="using.win2000">
    	<equals arg1="${deploy.os}" arg2="win2000" />
    </condition>
    <condition property="using.win2000">
    	<equals arg1="${deploy.os}" arg2="winXP" />
    </condition>    
    
    <condition property="dialogix.user_role" value="Developer">
    	<and>
    		<equals arg1="${dialogix.authorable}" arg2="true"/>
    		<equals arg1="${dialogix.deployable}" arg2="true"/>
    	</and>
    </condition>
    <condition property="dialogix.user_role" value="Interviewer">
    	<and>
    		<equals arg1="${dialogix.authorable}" arg2="false"/>
    		<equals arg1="${dialogix.deployable}" arg2="true"/>
       	</and>
    </condition>
    
    <condition property="dialogix.webbable" value="_WebServer">
    	<equals arg1="${dialogix.web_server}" arg2="true"/>
    </condition>
     <condition property="dialogix.webbable" value="">
    	<equals arg1="${dialogix.web_server}" arg2="false"/>
    </condition>   
    
    <condition property="dialogix.package_name" value="ALL">
    	<equals arg1="${LICENSE.PACKAGE_DIR}" arg2="**" />
    </condition>    
    <condition property="dialogix.package_name" value="${LICENSE.PACKAGE_DIR}">
    	<not>
    		<equals arg1="${LICENSE.PACKAGE_DIR}" arg2="**" />
    	</not>
    </condition>  
    
    <condition property="dialogix.start_dir" value="">
    	<equals arg1="${LICENSE.PACKAGE_DIR}" arg2="**" />
    </condition>    
    <condition property="dialogix.start_dir" value="${LICENSE.PACKAGE_DIR}">
    	<not>
    		<equals arg1="${LICENSE.PACKAGE_DIR}" arg2="**" />
    	</not>
    </condition>  
    
    <property name="zip.name" 
    	value="${app.name}_${app.version}_${deploy.os}_${dialogix.package_name}${dialogix.webbable}_${dialogix.user_role}_Tomcat_${tomcat.version}_${dialogix.ssl_role}_${dialogix.db_role}" />
    	
    <pathconvert targetos="windows" property="DIALOGIX.HOME">
    	<path>
    		<pathelement location="${tomcat.home}"/>
    	</path>
    </pathconvert>
    
    <pathconvert targetos="windows" property="ARCHIVE.DIR">
    	<path>
    		<pathelement location="${floppy.dir}"/>
    	</path>
    </pathconvert>
    
    <pathconvert targetos="windows" property="WORKING.DIR">
    	<path>
    		<pathelement location="${tomcat.home}/webapps/${dialogix.package_name}/WEB-INF/working"/>
    	</path>
    </pathconvert>    
    
    <pathconvert targetos="windows" property="COMPLETED.DIR">
    	<path>
    		<pathelement location="${tomcat.home}/webapps/${dialogix.package_name}/WEB-INF/completed"/>
    	</path>
    </pathconvert>            
  </target>
  

</project>
