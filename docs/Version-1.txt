TRICEPS Project

Description of Version 1
-------------------------

Triceps version 1 is a prototype system designed as an early proof of concept.  The overall objective of the Triceps project is to produce a simple, flexible system to create interview schedules, conduct individual interviews, and report interview results both individually and in aggregate.

Given a predefined interview, as might be depoyed in a large epidemiological survey, the primary concern is with the specific data gathered about subjects.  However, when the interview itself is the subject of research or when both the interview and the data have implications on the nature of the concepts that unite them, it is useful to have a system that offers independent, comprehensive control of each of these components.  The objective of the Triceps project is to produce such a system.  That is, Triceps will provide users the ability to gather, analyse, and report interview data and to design and configure arbitrarily complex interviews, by separately specifying and then linking at each node its three essential components - its concept, its action, and its datum.  

In the process of interview creation, the system provides an author with a context, via the display, in which the author can exercise independent specification and control of the concepts that define the domain of interest, the actions to be taken in association with each concept, and the links that connect the current node with others.  The process of creating an interview can itself be understood as a specialized interview in which the author's "answers" to basic design "questions" build the nodes.  Any discrete collection of nodes the author defines is a schedule.  In version 1 this context is available in a tab-delimited spreadsheet format.  

In conducting interviews, the system responds to a user's request and traverses nodes (of what it does know) in the manner defined by the author (this is simply sequential in version 1) to generate new nodes (of what it has discovered).  In the sequential traversal in version 1, each node first evaluates its dependencies (links to other nodes) to determine whether its action should be performed.  The system, in effect, asks "do I need to consider this?" for each node in the schedule.  If the dependencies are satisfied, the system performs the specified action and stores its result.  The actions are of two types either external or internal.  In version 1, these are simply either a displayed query of the user (e.g., interviewee, author) or an internal query of the data collected from previously traversed nodes.  The result of both types of action is itself stored in a newly generated node.

In subsequent versions, the plan is to replace the sequential traversal of nodes with one determined by the defined logical relations between nodes (that is, among the things it  already knows).  In that case, a given node will not be considered unless it is logically implicated in the process of generating a new node.

The system in version 1 reports the results of both what it learned from an author and what it learns from interviewees on a node by node basis.

The design of the system assumes the following entities will be important to the user as  points of examination, variation, and experimentation:
-  the answers given by the interviewee (e.g., yes, no, very bad, uncle, June)
-  the actions performed at each node (e.g., "How old are you?", count the symptoms present)
-  the concepts applicable at each node (e.g., ADHD, inattention, display group, age)
-  the dependencies between nodes (e.g., ask this question only if the answer to the previous question was "yes")

The design of other interview systems typically models entities like question, answer, interview, subject in the code of the system.  This is adequate when the system is designed for a limited question/answer set, only needs to deliver a limited type of interview, or is only being deployed in a restricted domain.  Triceps' design model, in contrast, models these entities as dynamic, modifiable data elements rather than as inherent elements of the system.  This is accomplished by applying the theoretical abstraction of its model of inquiry and consequently gives the system both a far greater range of applicability and, within a given domain of application, it allows more flexibility in interview design, delivery, and reporting.  

There are other interview construction systems:
Survey Solutions for the Web, Perseus 
WinAsks Professional 2.0, SmartLite Software
SurveyEase, Golden Hills Software
InstantSurvey, NetReflector.com, Inc.
eListen, Scantron Technologies
Inquisite, Catapult Systems Corp.
WinQuery, The Analytical Group


Typical limits of available interview construction programs are that:
1."skip" logic is rudimentary or absent
2.they allow fixed question forms, i.e., little or no dynamic question formation
3.they provide limited, hard-coded answer types
4.no reference is made to standard domain concepts or types
5.display options are fixed, though may be sophisticated
6.data analysis has minimal effects on data collection, i.e., interviews are static

____________________________________________
Version 1 Particulars:

Version 1 does not have a specific schedule creation facility.  A schedule is simply created in a pre-established, tab-delinited spreadsheet format.  The schedule created for the version 1 prototype is adopted from the Introduction and ADHD sections of the NIMH DISC-IV.  Each row of the spreadsheet specifies the following items:
-- concept:  a unique term or ontological entity in the domain of study
-- description:  currently used for substitutions into the text of subsequent questions
-- node ID:  a unique identifier
-- activation dependencies:  to determine whether the node's action is to be performed
-- user reference:  corresponds where possible to the paper DISC numbering
-- action type:  question or evaluation
-- action:  a string to be displayed or evaluated
-- answer type:  uses standard form components, e.g., checkbox, text, combo

There is only rudimentary reporting facility.  The evidence is displayed cumulatively as it is discovered.

Users interact with the system through a web browser.  A request for the URL:
http://localhost/triceps/servlet/TricepsServlet
starts an interview.  The display has four areas:  At the top is the question and answer area.  Below that is the navigation area with buttons to move forward, backward, suspend the interview, get help, jump to a particular node, clear the evidence, and reload the questions.  (The latter three functions are for testing purposes and would not be present in a production version.)  Below the navigation area is the node information area that
displays the several elements that compose a node and are read from one row of the schedule definition spreadsheet.  The area at the bottom displays the evidence accumulated up to the current point in the interview.

Characteristics to note:
	easy back and forth navigation
	values are preserved when reviewing previously answered questions
	substitutions (readbacks) are made appropriately
	scoring is done as the evidence accumulated warrants
 	each node defines a discrete association
		between a concept, an action, and a datum.
	the system has no DISC-specific coding -- the schedule definition
		is written entirely in the spreadsheet
	multiple concurrent, distributed interviews may be conducted from the one
		system
	activation dependencies refer to previous evidence

Limitations to note:
	date calculations (e.g., November - 6 = May) do not work
	the concept definitions are unique but unverified
	help does not work
	chose of schedules is limited
	the display is rudimentary
	suspend/resume functionality is limited
	the subject is the only interviewee
