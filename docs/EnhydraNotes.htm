<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	
	<META NAME="VPSiteProject" CONTENT="file:///C|/cvs/Triceps/TricepsHTML.vpp"><META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<META NAME="GENERATOR" Content="Visual Page 2.0 for Windows">
	<TITLE>Open Source Architectures for Multi-layer Authoring</TITLE>
</HEAD>

<BODY>

<P ALIGN="CENTER"><B><FONT SIZE="5">Enhydra Notes</FONT></B></P>
<P><B><A HREF="http://www.enhydra.com/"><FONT SIZE="4">ENHYDRA</FONT></A></B><FONT SIZE="4"> (3.0 beta2)</FONT>

<BLOCKQUOTE>
	<P><FONT SIZE="4">FEATURES</FONT></P>
</BLOCKQUOTE>


<UL>
	<UL>
		<LI>Goal is to separate business logic from content and support robust database interfaces
		<UL>
			<LI>support for JDBC-like ResultSet that can aggregate from several different databases simultaneously
			<LI>support for database load-balancing layer
			<LI>includes DODS (Data Object Design Studio) - a GUI for creating data objects and queries
		</UL>
		<LI>uses XML ID attributes to reference external logic
		<LI>automates conversion of HTML pages into Java code to construct DOM tree from which HTML can be re-created
		<LI>WML extensions for wireless
		<LI>cookie-less sessions (e.g. supports legacy browsers, and users who don't allow cookies)
		<LI>strictly geared towards HTML
	</UL>
</UL>


<BLOCKQUOTE>
	<P><FONT SIZE="4">XMLC SYNTAX</FONT></P>
</BLOCKQUOTE>


<UL>
	<UL>
		<LI>Separate logic and content by using XML tags to reference external business logic
		<LI>Enhydra finds any instance of ID attribute within HTML tags, then generates a DOM representation of HTML document
		with getElementID and setTextID() methods for each ID found.
		<LI>&lt;SPAN ID=&quot;name&quot;&gt;, &lt;FORM ID=&quot;name&quot;&gt;, &lt;INPUT ID=&quot;name&quot;&gt;
		<UL>
			<LI>allows dynamic manipulation via HTMLInputElement, HTMLHeadElement, HTMLTitleElement, HTMLBodyElement, HTMLParagraphElement,
			HTMLFormElement, etc. classes
		</UL>
	</UL>
</UL>


<BLOCKQUOTE>
	<P><FONT SIZE="4">JOLT SYNTAX</FONT></P>
</BLOCKQUOTE>


<UL>
	<UL>
		<LI>CONDITIONAL_SYNTAX
		<UL>
			<LI>IFEQ, IFNEQ
			<LI>IFDEF, IFNDEF
			<LI>IFCALL, IFNCALL
		</UL>
		<LI>Markup tags
		<UL>
			<LI>(@ (encoding) name : default @)
			<LI>encoding = /HTML | JavaScript/
		</UL>
		<LI>Dumping Known field names
		<UL>
			<LI>(@@)
		</UL>
		<LI>&lt;JOLT JAVADEF&gt;
		<UL>
			<LI>globally scoped Java declarations, code
		</UL>
		<LI>&lt;JOLT HTMLDEF=&quot;methodName&quot;&gt;
		<UL>
			<LI>macro to refer to repeatable HTML segments
		</UL>
		<LI>&lt;JOLT JAVACALL=&quot;methodName&quot; ARG.field1=&quot;value1&quot; ARG.field2=&quot;value2&quot;&gt;
		<LI>&lt;JOLT HTML CONDITIONAL_SYNTAX&gt;conditionally include this&lt;/JOLT&gt;
		<LI>&lt;JOLT JAVAIMPORT&gt;
		<LI>&lt;JOLT INCLUDE&gt;
		<LI>&lt;JOLT JAVACATCH&gt;
		<LI>&lt;JOLT JAVAFINALLY&gt;
	</UL>
</UL>


<BLOCKQUOTE>
	<BLOCKQUOTE>
		<P>What is missing?</P>
	</BLOCKQUOTE>
</BLOCKQUOTE>


<UL>
	<UL>
		<UL>
			<LI>looping?
			<UL>
				<LI>are CONDITIONAL_SYNTAX clauses executed on each pass? If so, can use function call to iterate over an Enumeration.
				If not, it is needed
			</UL>
			<LI>conditionals?
			<UL>
				<LI>can (@...@) substitution be used within conditionals - which is parsed first?
			</UL>
			<LI>nested substitution?
			<UL>
				<LI>how many passes on the substitution - e.g. (@ arg.(@count@).value@)?
			</UL>
		</UL>
	</UL>
</UL>


<BLOCKQUOTE>
	<P>DODS<BR>
	<BR>
	          Goal is to facilitate object-to-relational database mapping <BR>
	          Allows definition of data &quot;Things&quot; via GUI, generating: <BR>
	               Thing.sql - containing &quot;create table&quot; commands <BR>
	               ThingDO.java - represents a row in the ResultSet <BR>
	               ThingQuery.java - provides SQL query access to database <BR>
	               ThingBDO.java - business data object - extra layer of abstraction fro dealing with data 
</BLOCKQUOTE>


</BODY>

</HTML>
