<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	
	<META NAME="VPSiteProject" CONTENT="file:///C|/cvs/Triceps/TricepsHTML.vpp"><META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">

	<META NAME="GENERATOR" Content="Visual Page 2.0 for Windows">
	<TITLE>Triceps Project</TITLE>
</HEAD>

<BODY LINK="blue">

<P><B>What is it?</B></P>

<UL>
	<LI>Triceps is a WWW-based software engine for rapidly designing, deploying, collecting, and analyzing complex
	surveys and structured interviews.
	<LI>In particular it:
	<UL>
		<LI>allows interview schedule definition or modification
		<LI>performs interviews
		<LI>reports interview results
		<LI>instantiates a generalizable model of inquiry
	</UL>
</UL>

<P><B>Why is it useful?</B></P>

<UL>
	<LI>can be deployed for data collection in many ways
	<LI>connects interview questions and answers with standard vocabulary and concepts
	<LI>works for any interview language
	<LI>permits dynamic, personalized interviews
	<LI>permits data storage flexibility both in format and location
</UL>

<P><B>What problems does it solve?</B></P>

<UL>
	<LI>the speed of interview development
	<LI>the cost of system code modification
	<LI>unreferenced data and questions
	<LI>the standardization of terms and concepts
	<LI>the integration with other systems
	<LI>interview tailoring, i.e., shaping a interview in the light of previous responses
	<LI>the confusion of content with presentation
	<LI>deployment limitations
	<LI>the need for data isolation
	<LI>Allows the rapid creation of web-based surveys and clinical interviews.
	<LI>Supports on-line analysis of the results.
	<LI>Supports conditional branching based upon previous responses
	<LI>Can implement decision trees, clinical guidelines, and critical pathways
	<LI>Can tailor interview to user’s wants or needs
	<LI>Supports conditional tailoring of questions
	<LI>Can summarize previous answers
	<LI>Supports internationalization: tailoring interview to user’s language
	<LI>Supports conditional tailoring of the accessibility of the presentation
	<LI>Will allow visually impaired to see larger fonts
	<LI>Plan is to allow questions to be read via Text-to-Speech; and answers to be recorded via Voice
</UL>

<P><B>What are its advantages?</B></P>

<UL>
	<LI>simple, compact, and fast
	<LI>domain independent (e.g., useful in medicine or marketing)
	<LI>permits independent control of standardized concepts, questions, and their data
	<LI>easy to use
	<LI>questions and data are clearly referenced by a standard concept or vocabulary
	<LI>permits personalized questions
	<LI>built to use the internet for distributed deployment and data storage
	<LI>supports display and media variations
	<LI>supports multiple users
	<LI>platform independent
	<LI>not limited to pre-defined question or answer types
	<LI>data persistence is not bound to any particular storage system
	<LI>Cross-platform, since Java-based.
	<LI>Client-Server option allows centralized collection of results
	<LI>Allows the logic for analyzing the results to be linked to the interview.
	<LI>Supports on-line analysis and branching of interview.
	<LI>Separates the content and logic of the survey from its presentation
	<LI>Multiple input and output modalities (text, voice) can be dynamically utilized
</UL>

<P><B>What is novel about it?</B></P>

<UL>
	<LI>its underlying theoretical model
	<LI>possesses advanced iteration logic
	<LI>applicable in multiple domains
	<LI>dynamic question formation, tailoring
	<LI>action flexibility
	<LI>explicit integration of standard terms and concepts at each step in the interview
	<LI>separates content and logic of the interview from its presentation
	<LI>able to interpret and execute actions defined in the schedule (external to the system)
	<LI>On-line analysis of interview results
	<LI>Conditional branching of interview based upon prior responses
	<LI>Dynamic generation of voice-activated responses
</UL>

<P><B>Who will use it?</B> 

<UL>
	<LI>Interviewers / Clinicians
	<UL>
		<LI>collecting data face-to-face using pre-dedesigned structured interviews
	</UL>
	<LI>Enterprises / Advertisers
	<UL>
		<LI>collecting data in web-based interviews
		<LI>create cross-language, personalized surveys
	</UL>
	<LI>Researchers / Clinicians
	<UL>
		<LI>wanting to rapidly design robust tools for collecting survey data
		<LI>developing and deploying measurement instruments
		<LI>creating customized data collection tools.
	</UL>
	<LI>Educators
	<UL>
		<LI>developing curricula, teaching courses, giving tests
		<LI>customization of test based upon accuracy of previous answers
	</UL>
	<LI>Special Educators who want to teach and test individuals with special needs.
	<UL>
		<LI>Having the questions read to them automatically.
		<LI>Having the system record and proceed based upon their spoken responses.
	</UL>
	<LI>Students
	<UL>
		<LI>organizaing material being studied
	</UL>
	<LI>Domain specialists 
	<UL>
		<LI>developing improved concept and relation typologies
	</UL>
</UL>

<P><B>What is the closest prior state of the art?</B></P>

<UL>
	<LI>systems to define, deliver, and score simple, static interviews
	<LI>systems to define, deliver, and score educational programs (Socratease)
	<LI>domain-specific systems to deploy, score, and report complicated interviews (C-CISC, JADE)<B></B>
</UL>

<P>[Google: &quot;conditional branching&quot; survey design]</P>

<UL>
	<LI>Perseus (<A HREF="http://www.perseus.com/">http://www.perseus.com</A> )
	<LI>eListen (<A HREF="http://www.elisten.com/">http://www.elisten.com</A> )Uses ActiveX for &quot;skip logic&quot;,
	CGI back-end
	<LI>RiskPac (<A HREF="http://www.csciweb.com/rip.htm">http://www.csciweb.com/rip.htm</A> )
	<LI>TeleMinder (<A HREF="http://eye.hooked.net/decsys/tmapp.htm">http://eye.hooked.net/decsys/tmapp.htm</A> )automated
	lab reporting
	<LI>CATI (<A HREF="http://www.msubillings.edu/cati/">http://www.msubillings.edu/cati/</A> )telephone interviews
	<LI>OASurv (<A HREF="http://www.codap.com/OSHistory.htm">http://www.codap.com/OSHistory.htm</A> , <A HREF="http://www.ijoa.org/papers/author2.html">http://www.ijoa.org/papers/author2.html</A>
	)
	<LI>InstantSurvey (<A HREF="http://www.netreflector.com/products/instant_survey.htm"> http://www.netreflector.com/products/instant_survey.htm</A>)
	<LI>Inquisite (<A HREF="http://www.inquisite.com/">http://www.inquisite.com/</A> )
	<LI>WebCrossing (<A HREF="http://webcrossing.com/">http://webcrossing.com/</A> )designing chat rooms with conditional
	branching
	<LI>DRI (<A HREF="http://www.digitalresearch.com/dri.htm">http://www.digitalresearch.com/dri.htm</A> )
	<LI>WinQuery (<A HREF="http://www.acsinfo.com/">http://www.acsinfo.com/</A> )automated randomization &amp; testing
	of survey
</UL>

<P>
<P><B>Competing XML Standards</B></P>

<UL>
	<LI>Business Rules Markup Language (<A HREF="http://www.research.ibm.com/rules/home.html">http://www.research.ibm.com/rules/home.html</A>)
	<LI>Knowledge Interchange Format (<A HREF="http://logic.stanford.edu/kif/">http://logic.stanford.edu/kif/</A>)
	<LI>Forms
	<UL>
		<LI>XFA (<A HREF="http://www.xfa.com/">http://www.xfa.com/</A>) &amp; (<A HREF="http://www.jetform.com/">http://www.jetform.com/</A>)
		<UL>
			<LI>XML language for specifying equations for processing forms. (<A HREF="http://www.xfa.com/spec/xfa-formcalc/xfa-formcalc.html">http://www.xfa.com/spec/xfa-formcalc/xfa-formcalc.html</A>)
			<LI>Data are typeless and automatically promoted.
			<LI>Little looping logic.
			<LI>Many built-in functions for math, dates, string, and logic.
			<LI>Supports arrays.
			<LI>Uses dot notation for referencing variables.
			<LI>Date/Time functions use normal Java locale formats to specify input/output formatting.
			<LI>Another syntax deals with form layout issues. (<A HREF="http://www.xfa.com/spec/xfa-template/xfa-template.html">http://www.xfa.com/spec/xfa-template/xfa-template.html</A>)
			<LI>Unclear how it deals with externalizing collected data (e.g. where to send data that has been collected)
			<LI>What about conditional branching? (or fields that are conditionally available for input, based upon previous
			input)
			<LI>What about conditional formatting of question elements
			<UL>
				<LI><A HREF="http://www.jetform.com/pressroom/prir000124.html">http://www.jetform.com/pressroom/prir000124.html</A>
			</UL>
		</UL>
		<LI>XFDL (<A HREF="http://www.w3.org/TR/1998/NOTE-XFDL-19980902">http://www.w3.org/TR/1998/NOTE-XFDL-19980902</A>)
		<UL>
			<LI>Seems to have been superceded by others
			<LI>UWI (<A HREF="http://www.uwi.com/">http://www.uwi.com/</A>)
		</UL>
	</UL>
	<LI>User Interface Design
	<UL>
		<LI>XUL (<A HREF="http://www.mozilla.org/xpfe/xptoolkit/xulintro.html">http://www.mozilla.org/xpfe/xptoolkit/xulintro.html</A>)
		- allows embedded JavaScript
		<LI>Chrome (<A HREF="http://www.mozilla.org/xpfe/ConfigChromeSpec.html">http://www.mozilla.org/xpfe/ConfigChromeSpec.html</A>)
		- the part that of the application that lies outside of the client area
		<UL>
			<LI>toolbars, menubars, progressbars, etc.
		</UL>
		<LI>UIML (<A HREF="http://uiml.org/specs/index.html">http://uiml.org/specs/index.html</A>)
	</UL>
	<LI>Voice
	<UL>
		<LI>VoxML (<A HREF="http://www.voxml.com/voxml.html">http://www.voxml.com/voxml.html</A>) - Motorola
		<LI>JSML (<A HREF="http://java.sun.com/products/java-media/speech/forDevelopers/JSML/">http://java.sun.com/products/java-media/speech/forDevelopers/JSML/</A>)
		- Sun seems obsolete
		<LI>VoiceXML (<A HREF="http://www.voicexml.org/">http://www.voicexml.org/</A>) - IBM
	</UL>
</UL>

<P>
<P><B>Generic Questionnaires: What can they contain?</B></P>

<BLOCKQUOTE>
	<P><B>Equations/Dynamic Evaluations</B></P>
	<UL>
		<LI>QuestionText
		<UL>
			<LI>String getQuestionString();
			<LI><I>Syntax</I>: &lt;q&gt; This is a sample questions dated &lt;eval&gt; Today() &lt;/eval&gt;.&lt;/q&gt;
		</UL>
		<LI>Validation
		<UL>
			<LI>boolean isValid(String answer); // if false, then show error message
			<LI>Parse Date(), Time(), valid number ranges (based upon XML Schema?), SSN, user-defined, etc.
		</UL>
		<LI>ErrorMsg
		<UL>
			<LI>String getErrorString();
			<LI><I>Syntax:</I> <I>same as Question, with added ability to reference the answer the user is trying to enter.
			Akin to Bean's VetoablePropertyChange()?</I>
		</UL>
		<LI>Applicability: Whether or not this question needs to be asked
		<UL>
			<LI>boolean isApplicable();
		</UL>
		<LI>Storage:
		<UL>
			<LI><I>Syntax</I>
			<UL>
				<LI>SQL-like with hiding of JOINS?
				<LI>Dot-notation: DB.Table.Field?
				<LI>Implicit support for 1-n relationships everywhere?
				<LI>DB access, Table creation, etc. (e.g. DB maintenance) syntax within configuration section. Authors/Questions
				should only have to access storage location by consistent naming schema, rather than knowing SQL or other storage
				syntax
			</UL>
			<LI>On-line storage for rapid retrieval, and support for asynchronous access (e.g. don't want interview to hang
			if DB connection falters)
		</UL>
		<LI>Retrieval
		<UL>
			<LI><I>Syntax</I>
			<UL>
				<LI>Like Storage?
				<LI>Authentication, Authorization/Access issues?
			</UL>
			<LI>On-line DB with background data loading/processing to avoid delays?
		</UL>
		<LI>Looping
		<UL>
			<LI>Foreach, while, etc.
		</UL>
	</UL>
	<P><B>References</B></P>
	<UL>
		<LI>Who
		<UL>
			<LI>Author, journal, title, pages, date, ...
		</UL>
		<LI>What
		<UL>
			<LI>Instructions/help, cross-references
			<LI>email,
		</UL>
	</UL>
</BLOCKQUOTE>


</BODY>

</HTML>
