<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<TITLE>untitled</TITLE>
</HEAD>

<BODY>

<P>Improving Epidemiological Infrastructure: 6 prong approach

<OL>
	<LI>Optimize data collection - least restrictive, supporting voice, paper, web, and any data type
	<LI>Optimize data reporting - hybrid database so that generic design and ad-hoc, dynamically generated specific
	databases
	<LI>Best content - assessment and diagnostic instruments from PI, plus ability to add computer adaptive testing
	<LI>Psychometrics and quality improvement - post deployment analysis of psychometric drift, effects of modality
	for input, and who is asking the questions
	<LI>Coding - LOINC, and item banking
	<LI>Improved data analytics - easily export to SAS/SPSS; dynamic query design via web; easily accessible descriptive
	statistics
	<LI>Automatic creation of data warehouses directly from instruments
	<LI>Support for knowledge based temporal querying for dynamic decision support and quality improvement.
</OL>

<P>
<HR ALIGN="CENTER">
</P>
<P>Dialogix Overview</P>

<UL>
	<LI>1. Technical docs located at http://www.dialogix.org/Instructions.htm
	<LI>2. Instruments are tab separated files, e.g. located at /usr/local/Dialogix/webapps/Demos/WEB-INF/schedules/*.txt
	- contain headers (reserved words), followed by one row per data value
	<LI>3. Data stored in two locations: (1) to mysql.dialogix2993 tables; (2) to …/Demos/WEB-INF/working/*.dat and
	*.evt. When done, copied over to …/WEB-INF/completed/*.jar
	<LI>4. What makes Dialogix special?
	<UL>
		<LI>a. Compound, object-oriented data primitives - Datum as type {number, date, text, etc.}, value (according to
		type), missingflag (OK, unasked, NA, invalid, refused, unknown, not_understood), comment (so feedback can be given
		on any question)
		<LI>b. LALR expression parser &amp; engine (in yacc/Javacc) - uses Datum primitives
		<UL>
			<LI>i. Fully equation syntax like C, with operators, parentheses, in-line conditionals
			<LI>ii. Extensible function syntax - if data value not recognized as a variable name, checks whether function,
			and passes variable-length list of Datum values to it
			<LI>iii. Evaluation engine is stack based, loosely typed (data types promoted), and carries forward missingflag
			in all calculations
			<LI>iv. Evaluates expressions in context of current values of Datums within interview
		</UL>
		<LI>c. Text renderer
		<UL>
			<LI>i. Uses perl-like syntax to separate text from in-line equations, e.g. &quot;Hi, `Tom`, today is `today()`.&quot;
			<LI>ii. Suppports in-line HTML markup
		</UL>
		<LI>d. Fast, custom HTMLTidy-like filter
		<UL>
			<LI>i. Uses stack-based approach to check and fix balancing of all outputted text (generating log files to show
			errors)
		</UL>
		<LI>e. Multi-lingual
		<UL>
			<LI>i. Built-in for date manipulation
			<LI>ii. Language switching within an interview
		</UL>
		<LI>f. Data Manipulation
		<UL>
			<LI>i. Primititive datatypes at date, month, year, etc levels - if add/remove numbers, does data math
			<LI>ii. Multi-level data casting, with complete error trapping - e.g. switch date types
		</UL>
		<LI>g. Data storage
		<UL>
			<LI>i. Data values - not just answer, but also language, timestamp, question as asked, and full Datum log (type,
			value, missingflag, comment)
			<LI>ii. Process values - whether user clicked &quot;next&quot;, &quot;previous&quot;; step within interview; #
			display screens seen within interview, duration viewed previous questions
			<LI>iii. Event values - clickstream, so can detect bad network connections, slow answers, and vacillation when
			answering questions.
		</UL>
	</UL>
	<LI>5. Goals - migrate to database driven architecture, yet maintain small footprint
	<UL>
		<LI>a. Instrument Items (input)
		<UL>
			<LI>i. many fields will be longvarchar/text
			<LI>ii. validation criteria will be separate, nullable columns (datatype, min, max, other-allowable (single column)
			<LI>iii. cardinality (not currently in model) - minRequired, maxRequired (e.g. if 0, then answer is optional)
			<LI>iv. inputstyle (list, combo, … -- or pointer to a macro or stylesheet fragment to generate answer-list level
			styling)
			<LI>v. answerlist-based validation - enum (with/without &quot;other-specify&quot;), sql - might need separate normalization
			<LI>vi. input &amp; formatting masks
		</UL>
		<LI>b. InstrumentMetadata
		<UL>
			<LI>i. InstrumentID, metadata
		</UL>
		<LI>c. InstrumentContents
		<UL>
			<LI>i. Ordered list of items, with relevance, localName, ItemFK,
		</UL>
		<LI>d. Data Output
		<UL>
			<LI>i. Only to database - not to flat files too
			<LI>ii. Better tracking of sessions, instruments (better normalization)
		</UL>
	</UL>
	<LI>6. Goals - multiple views of data (subset)
	<UL>
		<LI>a. Import/export &Ocirc; Dialogix syntax
		<LI>b. Syntax error listings
		<LI>c. Export =&gt; SAS, SPSS
		<LI>d. IRB-view
		<LI>e. Translator's view
		<LI>f. Dependencies (relevance and tailoring within questions)
		<LI>g. Export =&gt; XForms syntax
		<LI>h. Export =&gt; XML in order to be input for Cocoon so can use XSLT formatting engines =&gt; VoiceXML, WAP,
		PDF, etc.
	</UL>
	<LI>7. Challenges
	<UL>
		<LI>a. Can PHP or Python replace Java for Datum, expression parser, etc (special Dialogix features?
		<LI>b. If not, can PHP efficiently wrap those functions, ideally also freeing memory when done?
	</UL>
</UL>

<P>
<HR ALIGN="CENTER">
<BR>
10/18/04 Dialogix Planning</P>
<P>Dialogix planning

<UL>
	<LI>1) Decouple QSS parser to work database?
	<UL>
		<LI>a. Parser.java already decoupled - make test program
		<LI>b. Remove dependence upon Logger - convert Logger into a log file writer (e.g. Log4J)
		<LI>c. Pass in context of data elements / values as schema?
		<LI>d. Can we replace it with a XML schema or javascript interpreter? (e.g. Rhino?)
		<LI>e. Storing list of values (vector)? Array support.
		<LI>f. Separate functions from Evidence.java =&gt; Functions.java receiving context and logging routing
		<LI>g. Can we use Perl or Python to interpret instead? Must support generic data structure (loosely defined data
		types), as well as multiple classes of missing values (refused, unasked, unknown, etc.). Should this be a primitive
		data type (e.g. Object has option for missing value flag), or a parallel bitmask array?
		<LI>h. Add in ability to do XPath-like querying (search for array within a hierarchy) (since instruments will be
		converted into collection of modules, potentially with repeating sections)
		<LI>i. What about reserved words? Context should be nestable like a stack (so can pop context back to prior value
		when go backwards).
		<LI>j. Modeling repeats? (conform with (or learn from) XForms modeling)
	</UL>
	<LI>2) Instrument instances (collecting data from a person on an instrument)
	<UL>
		<LI>a. Modeling of instrument in memory / storage
		<UL>
			<LI>i. Denormalized - like current excel file?
			<LI>ii. Normalized as 3 tables in Mysql? (metadata, contents, translation)
			<LI>iii. Normalize answer options? Only for authoring? Like data warehouse modeling of domains (like Dave Gestwick)
		</UL>
		<LI>b. When collecting data, primary key is instance which knows instrument, user, etc. (instead of filename as
		the unique identifier)
		<LI>c. Inserting data
		<UL>
			<LI>i. Generic as log file (inserts per screen transition) - stores history of values
			<LI>ii. Structured (based on instrument type and given instance) on server so don't lose data when stops (and have
			ability to resume session) - always update (start instance by setting all values to &quot;unasked&quot;).
			<LI>iii. In memory structure for rapid access to most recent value (hash table) - frankly, each hashtable should
			be its own context with variable scoping
		</UL>
		<LI>d. Modeling reserved words
		<UL>
			<LI>i. Each module has own stack, with inheritance from higher-level modules and proper variable scoping (so can
			overwrite name of higher-level)
			<LI>ii. Values are pushed and popped (e.g. labels, languages / locales)
			<LI>iii. How do we model stack on a database? Just via the log file so always re-read it and reconstruct the reserved
			word stacks, or us a vector on the DB?
		</UL>
		<LI>e. Computer adaptive testing
		<UL>
			<LI>i. How store incremental values for theta?
		</UL>
	</UL>
	<LI>3) Navigation
	<UL>
		<LI>a. Next set of relevant questions
		<UL>
			<LI>i. Post-conditioned gotos
			<LI>ii. Relevance
			<LI>iii. Item response theory
			<LI>iv. Other options for narrowing down to an answer?
		</UL>
		<LI>b. Randomly pick from next set of relevant? (semi-random within module - e.g. doing review of systems, know
		want to ask from head to toe, all being equal, and randomly pick a question related to the head)
		<LI>c. Randomly re-order directionality of scales?
	</UL>
	<LI>4) Instrument Modeling
	<UL>
		<LI>a. Perl scripts to upload all instrument content?
		<LI>b. Perl? To reconstruct instruments
	</UL>
	<LI>5) Data cleaning of current data
	<UL>
		<LI>a. Perl to match list and order of items to data within instruments to deduce the actual version of the interview
		used
	</UL>
	<LI>6) Version management
	<UL>
		<LI>a. Need way to compare instruments within category.
	</UL>
</UL>

<P><BR>
Tasks

<UL>
	<LI>1) Instruments
	<UL>
		<LI>a. Encoding (modeling)
		<LI>b. Authoring (GUI interface with WYSIWG to show contents, allowing for multiple languages)
		<LI>c. Reviewing (DB extract like showlogic.pl to show the order, messages, data values, etc.)
		<LI>d. Instantiating (getting content for an interview)
		<LI>e. Loading instruments that already exist
		<LI>f. Version tracking
	</UL>
	<LI>2) Operationalizing individual interviews
	<UL>
		<LI>a. Login acess / authentication
		<LI>b. Selecting an instrument
		<UL>
			<LI>i. Data layer
			<UL>
				<LI>1. DB of instruments
			</UL>
			<LI>ii. Business layer
			<UL>
				<LI>1. search functionality (keywords, list of search fields) for a new instrument?
				<LI>2. Restore from a previously suspended instrument?
			</UL>
			<LI>iii. Presentation layer
			<UL>
				<LI>1. Ways of showing which instrument can select
				<LI>2. Mechanisms for starting / resuming the instrument
			</UL>
		</UL>
		<LI>c. Now that in an instrument, 3 Tier for processing individual instance
		<UL>
			<LI>i. Data layer
			<UL>
				<LI>1. Server
				<UL>
					<LI>a. Generic log file (includes process logs - event timing, step counts)
					<LI>b. Structured database extracts / inserts/ updates
				</UL>
				<LI>2. Client
				<UL>
					<LI>a. In-memory hash table for most recent values
					<LI>b. Stack of reserved words
				</UL>
			</UL>
			<LI>ii. Business Logic Layer
			<UL>
				<LI>1. Navigation / Branching
				<UL>
					<LI>a. Select next set of relevant questions
					<LI>b. Randomize order or directionality
				</UL>
				<LI>2. Tailoring
				<UL>
					<LI>a. Selecting proper language
					<LI>b. Constructing sentences from mixture of text and data
				</UL>
				<LI>3. Exception handling
				<UL>
					<LI>a. E.g. branch out of instrument to suspend/resume; ask for help
				</UL>
				<LI>4. Data validation
				<UL>
					<LI>a. Schema based?
				</UL>
				<LI>5. Clarification
				<UL>
					<LI>a. E.g. ask to re-enter a value, optionally having different ways of asking for new content as in voice applications
				</UL>
				<LI>6. Context sensitive help
			</UL>
			<LI>iii. Presentation Layer
			<UL>
				<LI>1. Select modality
				<UL>
					<LI>a. Web
					<LI>b. Paper
					<LI>c. Voice
					<LI>d. PDA
				</UL>
				<LI>2. modality specific modifications
				<UL>
					<LI>a. e.g. style sheets
					<LI>b. changing amount of displayed content, optionally negotiationg with business layer re specifying how much
					of the next set of relevant can realistically display.
				</UL>
			</UL>
		</UL>
	</UL>
	<LI>3) Data warehousing
	<UL>
		<LI>a. Auto-build structured databases
		<LI>b. Auto-build data warehouse - needs two new columns in instrument:
		<UL>
			<LI>i. Cardinality (to show whether or not required, and how many responses required)
			<LI>ii. Dimensional modeling with dot notation - e.g. Patient.Age, which would be inserted into a dynamic data
			warehouse
		</UL>
	</UL>
</UL>

<P>
<HR ALIGN="CENTER">
</P>
<P>11/22/04 Development Ideas for Dialogix</P>

<UL>
	<LI>Security
	<UL>
		<LI>Roles
		<UL>
			<LI>Admin
			<LI>Create/Update/View Study
			<LI>Create/Update/View Instruments (by study?)
			<LI>Create/Update/View Data (by study)
			<LI>View Documentation
		</UL>
		<LI>Implementation
		<UL>
			<LI>Role-based permissions on PHP files used to query DB?
		</UL>
		<LI>Issues
		<UL>
			<LI>How encourage copyright owners to participate?
		</UL>
	</UL>
	<LI>LOINC
	<UL>
		<LI>View
		<UL>
			<LI>LOINC-view of instruments so can show LOINC codes for Nursing instruments
			<LI>Review proposed codes?
			<LI>View proposed LOINC / SNOMED codes for answer lists
		</UL>
		<LI>Edit
		<UL>
			<LI>Propose LOINC codes for individual items (view static contents, give box for submitting LOINC code)
			<LI>Code submission table: {user, item primary key, time, codeset (LOINC, SNOMED, UMLS), codeval, [reason]} so
			can have multiple submissions for a given element
			<LI>Similar table structure for answer sets?
			<LI>What about translations?
		</UL>
		<LI>Find
		<UL>
			<LI>Link to UMLS search function to give suggestions for items - e.g. using Apelon
			<LI>keyword search within both -- how implement efficiently? - e.g. using Apelon
			<LI>Likely will need batch procesing of content, generate a form that shows all related content with checkboxes
			to flag desired ones - e.g. Apelon
		</UL>
		<LI>Review
		<UL>
			<LI>Show all proposed LOINC codes (by topic or other filter)
			<LI>Create instrument and study to let experts vote for their choices
		</UL>
		<LI>Delphi
		<UL>
			<LI>Analyze modal scores, make new instrument that shows users that score and lets them re-confirm ther vote
			<LI>[ ] Are there computer systems for automating the modified-Delphi approach in this way?
		</UL>
	</UL>
	<LI>Literature Review
	<UL>
		<LI>Instruments
		<UL>
			<LI>[ ] Make table of all commonly used instruments -- from Mosby's?
			<LI>[ ] How many non-copyrighted ones are there? &gt; 2000
			<LI>[ ] Which are computerized, by whom, and where? e.g. MDS
			<LI>[ ] Which instruments were developed by PI-based researchers such that may retain shared copyright?
		</UL>
		<LI>Survey Systems
		<UL>
			<LI>CATI / CASI / CAPI
			<LI>Web-based
			<LI>XForms - not ready
			<LI>Voice
		</UL>
		<LI>Item Banking
		<UL>
			<LI>What is best of breed?
		</UL>
		<LI>Study Design &amp; Management
		<UL>
			<LI>What is best of breed?
		</UL>
	</UL>
	<LI>AHRQ
	<UL>
		<LI>Estimate cost per item / instrument to operationality and encode them
		<LI>Estimate cost to train / supervise staff to perform this function
		<LI>Estimate cost to do this for copyright owners? (legal fees?)
		<LI>What would it cost to computerize and encode all psychiatric instruments by end of 2005?
	</UL>
	<LI>Legal
	<UL>
		<LI>Trademark Dialogix?
		<LI>Trademark Psyckes
		<LI>Patent new Dialogix structure / goals?
	</UL>
	<LI>Business
	<UL>
		<LI>What is appropriate service fee to take copyrighted instruments, bank the items, and generate standard codes?
		<LI>Option to just do items without doing relevance and page layout
	</UL>
	<LI>Data Modeling
	<UL>
		<LI>Instruments
		<UL>
			<LI>Change so comprised of one or more modules, each of which has its own relevance
			<LI>Modules can contain sub-modules (e.g. entire other instruments), based upon relevance
			<LI>Modules could be rendered for tabbed browsing
		</UL>
		<LI>Cardinality
		<UL>
			<LI>Allow multiple values per item
			<LI>How store?
			<LI>How model for statistics?
		</UL>
		<LI>Event Data
		<UL>
			<LI>Load existing formats to Mysql for exploration
			<LI>Use Instrument _ TYPE format naming for tables
			<LI>Finish PHP files for reviewing those data
		</UL>
	</UL>
	<LI>Voice
	<UL>
		<LI>Lloyd assigned to take instrument data and generate voice-xml output
	</UL>
	<LI>ClickFox
	<UL>
		<LI>[ ] Generate sample path listings for them -- e.g. from either original AutoMEQ, or from Tutorial
	</UL>
	<LI>Administrative
	<UL>
		<LI>Backups
		<UL>
			<LI>Ensure that backing up to tape and/or SAN
		</UL>
		<LI>SSL Certificate
		<UL>
			<LI>for www.dialogix.org
			<LI>for psychinformatics.nyspi.org
		</UL>
	</UL>
	<LI>New Functionality
	<UL>
		<LI>Item Banking
		<UL>
			<LI>Edit concept
			<LI>Edit HTML fields (using FCKeditor)
		</UL>
		<LI>Search
		<UL>
			<LI>on concept, questions, response options
		</UL>
		<LI>Instrument Design
		<UL>
			<LI>Select all items (with filters) related to concepts of interest
			<LI>Make easy to select / re-order desired items
		</UL>
		<LI>Transformations
		<UL>
			<LI>Export instrument from tables =&gt; tab delimited version Dialogix currently uses
			<LI>Import from Excel into new instrument in scrath area? [done, using PHP]
		</UL>
		<LI>Export
		<UL>
			<LI>Any query to Excel, XML, etc.
		</UL>
		<LI>Study Management
		<UL>
			<LI>Study Table
			<UL>
				<LI>create / view / manage name, purpose, PI, start date, end date, IRB authorization, etc.
			</UL>
			<LI>Roles Table
			<LI>Users Table
			<LI>UserRoles Table
			<LI>StudyInstruments Table
			<UL>
				<LI>link finalized instruments to study
			</UL>
			<LI>InstrumentDevelopment
			<UL>
				<LI>Add study# and status flag to existing instrument and item tables
				<LI>Status flag = {current, retired, pending, etc.}
			</UL>
		</UL>
		<LI>Modified Delphi
		<LI>Tabbed browsing of modules
		<UL>
			<LI>tabs would really be buttons acting as submits
			<LI>system would only need to know list of modules (title or first few words of opening brace nodes)
			<LI>vertical tabs gives more flexibility - could use absolute CSS positioning to keep tabs visible
		</UL>
	</UL>
</UL>

<P>
<HR ALIGN="CENTER">
</P>
<P>12/16/04 Notes from Library Search on Instruments</P>

<UL>
	<LI>Handbook of Psychiatric Measures -- 2000.
	<LI>Mental Measurements Yearbook (2004) -- lists over 2000 commercially available instruments
	<UL>
		<LI>http://web5.silverplatter.com/webspirs/start.ws?customer=waldo&amp;databases=(YB)
		<LI>Lists availability, costs, etc. -- so would need to purchase a copy to get it encoded
		<LI>library.cpmc.columbia.edu/hsl
		<UL>
			<LI>Digital Collections =&gt; Databases =&gt; All columbia databases =&gt; A-Z =&gt; Mental Health
		</UL>
	</UL>
	<LI>Health and Psychosocial Instruments (HaPI) (2004)
	<UL>
		<LI>Behavioral Measurement Database Services - updated quarterly (why don't we have current version?)
		<LI>Info on unpublished instruments discussed in jurnal articles -- part of Ovid
		<LI>105,000 records in database
	</UL>
	<LI>PSYINDEXplus with TestFinder (OVID)
	<LI>National Health Information Infrastructure (NHII) -- http://aspe.hhs.gov/sp/nhii/
	<UL>
		<LI>HHS's Agency responses re NHII (http://aspe.hhs.gov/sp/nhii/hhsrole.html)
		<UL>
			<LI>AHRQ -- effective tech &amp; guidelines
			<LI>CDC -- infrastructure for population health
			<LI>Data Council (data development)
			<LI>HRSA -- telehealth
			<LI>NCHS - population health statistics
		</UL>
		<LI>NCVHS NHII Working Group - includes Stan Huff, Clem McDonald, &amp; Ted Shortliffe (so should contact them)
		<UL>
			<LI>Subcomitte on Standards and Security
			<UL>
				<LI>Vivian Auld
				<LI>J. Michael Fitzmaurice
				<LI>Betsy Humphreys
				<LI>Stan Huff
			</UL>
			<LI>Review transcript http://www.ncvhs.hhs.gov/041104ag.htm
		</UL>
		<LI>Volunteer OMH to be involved in the NHII (add Vesna to group)
	</UL>
	<LI>Needs
	<UL>
		<LI>[ ] Researcher to compile list of instruments from multiple sources
		<UL>
			<LI>triage which should be encoded (based upon current references in the literature)
			<LI>which are used by states and providers (large stakeholders)?
			<LI>which are encoded in commercial EMRs, and what terminologies (if any) do they use?
			<LI>obtain copies of those instruments
		</UL>
		<LI>[ ] Legal to arrange permissions to properly license for this purpose
		<LI>[ ] Data coders to keypunch the contents
		<LI>[ ] knowledge engineers to find relationships with existing UMLS terms (good search function)
		<LI>[ ] Programmers / DBs for instrastructure
		<UL>
			<LI>DB for storing
			<LI>distributed authoring
			<LI>one-many comparison to existing instruments
		</UL>
		<LI>[ ] Contact OVID see if their DBs show how many have shared copyright, and # of items within the instruments
	</UL>
	<LI>Child Psychiatry
	<UL>
		<LI>has Huge list of instruments: (434)
		<LI>part of mission is developing new, simpler instruments,
		<LI>Interested in / able to collect data on who likes which instruments for which indications
		<LI>Web site (http://192.168.32.233/) has links to instruments
	</UL>
</UL>

<P><BR>

<HR ALIGN="CENTER">
12/28/2004: Configuring Tomcat 5.5 for Dialogix on laptop</P>

<UL>
	<LI>Customizations
	<UL>
		<LI>Create these tables
		<UL>
			<LI>CREATE TABLE authority.user_roles (<BR>
			user_name varchar(15) NOT NULL default '',<BR>
			role_name varchar(15) NOT NULL default '',<BR>
			PRIMARY KEY (user_name,role_name)<BR>
			) ;<BR>
			CREATE TABLE authority.users (<BR>
			user_name varchar(15) NOT NULL default '',<BR>
			user_pass varchar(15) NOT NULL default '',<BR>
			PRIMARY KEY (user_name)<BR>
			) ;
		</UL>
		<LI>Copy this .jar file into the endorsed directory
		<UL>
			<LI>put mysql-connector-java-3.0.16-ga.jar in ${catalina.home}/common/endorsed
		</UL>
		<LI>Add this to server.xml
		<UL>
			<LI>&lt;Realm className=&quot;org.apache.catalina.realm.JDBCRealm&quot;<BR>
			driverName=&quot;com.mysql.jdbc.Driver&quot;<BR>
			connectionURL=&quot;jdbc:mysql://localhost:3306/authority?autoReconnect=true&quot;<BR>
			connectionName=&quot;root&quot; connectionPassword=&quot;&quot;<BR>
			userTable=&quot;users&quot; userNameCol=&quot;user_name&quot; userCredCol=&quot;user_pass&quot;<BR>
			userRoleTable=&quot;user_roles&quot; roleNameCol=&quot;role_name&quot; /&gt;
		</UL>
		<LI>Comment out the other Realm
		<LI>Uncomment the FastCommonAccessLogValve
		<LI>Install Tomcat as a service using service.bat install in order to get log messages to file instead of cmd window.
	</UL>
	<LI>Converting Dialogix to WAR file
	<UL>
		<LI>Updated build.xml with &quot;war&quot; option
		<LI>Create context.xml for the database connection so that can be different for each platform and instance. Will
		require documentation on how to customize the web.xml and context.xml; but easier than a re-compile!
		<UL>
			<LI>&lt;!-- Context information to add MySQL database connection for Dialogix --&gt;<BR>
			@@DB.COMMENT_START@@<BR>
			&lt;Context debug=&quot;5&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;&gt;<BR>
			<BR>
			&lt;Resource name=&quot;jdbc/dialogix&quot; auth=&quot;Container&quot; type=&quot;javax.sql.DataSource&quot;<BR>
			maxActive=&quot;100&quot; maxIdle=&quot;30&quot; maxWait=&quot;10000&quot;<BR>
			username=&quot;root&quot; password=&quot;&quot; driverClassName=&quot;com.mysql.jdbc.Driver&quot;<BR>
			url=&quot;jdbc:mysql://127.0.0.1:3306/dialogix2994?autoReconnect=true&quot;/&gt;<BR>
			<BR>
			&lt;/Context&gt;<BR>
			@@DB.COMMENT_END@@
		</UL>
		<LI>Add the database resource reference to web.xml
		<UL>
			<LI>@@DB.COMMENT_START@@<BR>
			&lt;resource-ref&gt;<BR>
			&lt;description&gt;DB Connection&lt;/description&gt;<BR>
			&lt;res-ref-name&gt;jdbc/dialogix&lt;/res-ref-name&gt;<BR>
			&lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;<BR>
			&lt;res-auth&gt;Container&lt;/res-auth&gt;<BR>
			&lt;/resource-ref&gt; <BR>
			@@DB.COMMENT_END@@
		</UL>
	</UL>
	<LI>Add this to startup.bat to log garbage collection parameters
	<UL>
		<LI>set CATALINA_OPTS=-verbose:gc
	</UL>
	<LI>Add logs directory /webapps so that Dialogix.log.err file can be created / written
	<LI>[DONE ] Validate SSL - can do in standalone Tomcat, or behind Apache (in which case don't use SSL Connector
	in server.xml)
	<UL>
		<LI>&lt;Connector port=&quot;8443&quot; <BR>
		maxThreads=&quot;150&quot; minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot;<BR>
		enableLookups=&quot;false&quot; disableUploadTimeout=&quot;true&quot;<BR>
		acceptCount=&quot;100&quot; scheme=&quot;https&quot; secure=&quot;true&quot;<BR>
		keystoreFile=&quot;dianexus.keystore&quot;<BR>
		keystorePass=&quot;&quot;<BR>
		clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;
	</UL>
	<LI>[NO: No added benefit unless load balance ] Link Tomcat behind Apache?
	<UL>
		<LI>(1) Use Proxies (e.g. so that all requests to www.dialogix.org:80 and :43 go to Tomcat, and protect its port
		so that no external calls allowed
		<LI>(2) Use the JK connector (AJP), which is more efficient than proxying if only using on server (instead of clustering).
	</UL>
	<LI>N.B. RequestDumperValve shows all header messages -- good for debugging, but don't keep on constantly
	<LI>[DONE] Modify the war deployment to be the name of the directory, not dialogix.war.
	<LI>[DONE ] Re-write index.htm file so automatically generated?
	<LI>[ ] All license info should really be in a database
	<UL>
		<LI>[ ] Model the DB
		<LI>[ ] Use it to apply permissions by study?
	</UL>
	<LI>[ ] Create ant deployments of all active projects for tomcat 5.5.4 for psychinformatics? Redundant, but easier
	to manage?
	<LI>[ ] Unit test to find memory leak
	<LI>[ ] Write all to DB, perhaps one set of tables (or DB) per project?
	<LI>[NO: JSP and taglibs too cumbersome ] Play with JSP, esp. taglibs?
	<LI>N.B. ${xxx.yy} expansion works within Ant properties files
	<LI>N.B. &lt;input&gt; can let specify which license file to deploy on the fly?
	<LI>N.B. Can put Oro and Mysql (and even Dialogix) into endorsed dir for deployment, but not &quot;droppable&quot;
	war file
	<LI>[??] Struts
	<UL>
		<LI>Not clear that this would be of any benefit. The taglibs approach to adding content is too laborious
		<LI>Pipeline is nice -- XXX -- where is the documentation that discusses the various steps needed for good access/authentication/translation/etc?
		<LI>Might help with internationalization, but pulling off of database may be more extensible and easier to manage
		<LI>Tiles -- seems too slow and inconvenient -- the Web.xml definition of them make it hard to grok.
	</UL>
	<LI>[done - 1/16/05 ] Velocity
	<UL>
		<LI>Templating is easy. Uses #if/#then, #set, #foreach, #macros
		<LI>Nice that can see the code within an HTML page, so easy to develop using a standard browser, rather than struts;
		but new building tools don't have that limitation
		<LI>Automatically adds values from GET line as the variable name (so no protection against overwriting reserved
		parameters)?
		<LI>Introspection style nice, such as $foo.bar.toInt().
		<LI>Creates contexts which can hold objects and arrays and be nested to create local scope
		<LI>Can call exec() from Java to create contexts, so could iteratively add Dialogix content
		<LI>However, math functionality is limited to integers, so not clear that has many direct benefits other than the
		introspection
		<LI>Can I use anything from their JavaCC or JJTree stuff?
		<LI>Good for view component, but not a replacement for Dialogix parser
	</UL>
	<LI>[done -1/16/05 ] JavaCC / JJTree -- update Dialogix.jj to support Unicode?
	<UL>
		<LI>COMMON_TOKEN_ACTION -- lets a user-defined routine be called after every call to the token manager -- could
		this let me do persistence management and/or db storage? [ ] Do I need this, or can the parser be modified to do
		so itself?
		<LI>UNICODE -- is not supported
		<LI>[Done - Dialogix2 ] Modify parser to use Context, rather than Triceps, since really only needs to read and
		set variables (plus ability to get functions externally)?
		<LI>[Done - Dialogix2 ] DatumMath would need to accept Context
		<LI>Data should support abstraction of business layers and EJB persistence and/or DB persistance? E.g. always use
		name to get/set value, but as Object with attached properties to declare type, or Datum which has type declared?
		<LI>Can Datum support arrays?
	</UL>
	<LI>Context would be interface with following features
	<UL>
		<LI>Logger
		<LI>Locale
		<LI>Functions
		<LI>Data
	</UL>
	<LI>[NO: Keep as is] Datum should be interface to make new datatypes pluggable? Problem is how to do DatumMath.
	<LI>[done] Rename package to org.dialogix.*
	<LI>[ ] Remove XMLString or tailor so can change what is filtered?
	<LI>[ ] Support Durations (date1 - date2) which don't have Java date=0 problem
	<LI>[done] Remove VersionIF dependency
	<LI>[done - 1/16/05 ] Logging via Log4J instead of my rudimentary logger
	<UL>
		<LI>There is a JDBC extensions to allow logging directly to MySQL -- use for general data writes?
	</UL>
	<LI>[ ] J2EE Patterns -- what do I need for data abstraction?
	<LI>[ ] How do I apply styles to data elements instead of in-lining in Node? CSS? This is a place where Velocity
	could be helpful as macros that are loaded from a library and evaluated
	<LI>Parser has several functions
	<UL>
		<LI>[done] Generate list of dependent nodes so that can dynamically tailor pages based upon relevance even when
		jumping around
		<LI>[done] Compute results of equations
	</UL>
	<LI>[done - 1/6/05 ] Build revised version of Parser that uses Logger?
	<UL>
		<LI>http://www.dialogix.org/ParserTest.php
		<LI>Has unit-testing file which evaluates all functions and shows green if successful - ParserTests.txt
	</UL>
</UL>

<P>
<HR ALIGN="CENTER">
</P>
<P>Notes from 1/13/05</P>
<P>Key Barriers to Dialogix Use?</P>

<UL>
	<LI>Functionality of instruments
	<UL>
		<LI>required
		<LI>multi-select
		<LI>tabbed browsing
	</UL>
	<LI>Real-time storage to database
</UL>

<P>Use Cases (Draft)</P>

<UL>
	<LI>Subject
	<UL>
		<LI>Logistics: select instrument, preview metadata (what is instrument about)?
		<LI>Navigation: next, previous, jump-to, quit, suspend, resume
		<LI>Style: change language, change multi-modal input style
		<LI>Answering: help, refuse, comment
	</UL>
	<LI>Interviewer
	<UL>
		<LI>[All Subject actions plus]
		<LI>Study Management select subject
		<LI>Data Management: review subject data
	</UL>
	<LI>Instrument
	<UL>
		<LI>Authoring
		<LI>Conversion of goto-based instruments to relevance (with authoring interface for specifying gotos)
		<LI>Validating
		<LI>Approving (IRB / PI)
		<UL>
			<LI>Enhanced view with all variables hyperlinked within page so if click on variable name (even if within equation
			or message), see its source, and thus allowable response options)
			<LI>Requires pre-computation of dependent items from relevance and message strings
		</UL>
		<LI>Suggest Changes (IRB / PI)
		<LI>Translating / Translator's view
		<LI>Deploy
		<LI>Import &lt;= XForms, Perseus, Sawtooth (Goto-based surveys)
		<LI>Export =&gt; XForms, VoiceXML, SAS/SPSS - optionally selecting subset
		<LI>Database creation
		<LI>SQL lookups for picklists
		<LI>SQL-based validation of parameters (cross-field and cross-instrument validation)
		<LI>Grouping related response sets
	</UL>
	<LI>Version Control
	<UL>
		<LI>Scratch area for development
		<LI>Each commit a new instrument stored in master database
		<LI>Items vs instruments with table mapping them (so both items and instruments normalized)
		<LI>Attributes of instruments re status, study
	</UL>
	<LI>Database Creation
	<UL>
		<LI>Generic
		<LI>Structured by tested instrument
		<UL>
			<LI>all fields of type text (e.g. like a flattend XML database), with schema-based conversion on export
			<LI>OR all fields of actual database type
		</UL>
	</UL>
	<LI>Instrument Modeling Properties
	<UL>
		<LI>Required -- { optional, page/module-required, instrument-required }
		<LI>HIPAA-type -- flag to indicate which of the 18 restricted hipaa data types this is (0 if not hipaa-protected)
		<LI>datatype / size (e.g. int(11))
		<LI>GIS type -- flag to indicate whether a latitude, longitude, state, zip code, street address, etc.
		<LI>Data Warehouse hint -- e.g. Person.Demographics.Age, converted into table structures
		<LI>multi-select
	</UL>
	<LI>Study
	<UL>
		<LI>Users
		<LI>Instruments in study
		<LI>Modules (supporting only relevance attributes)
		<LI>Search by metadata
		<LI>Select for study via web
	</UL>
	<LI>Internationalization
	<UL>
		<LI>Better bundle management for internationalized strings?
		<LI>Batik for I8N of buttons via SVG (so that large, fancy, but internationalized)
	</UL>
	<LI>Security
	<UL>
		<LI>Roles
		<UL>
			<LI>Author
			<LI>Editor
			<LI>Publisher
			<LI>Validator
			<LI>Translator
			<LI>Study PI
			<LI>Analyst
		</UL>
		<LI>DB Access by role
		<UL>
			<LI>Study admin - assign roles by task (not just tables)
			<LI>Direct DB access by admin and backup
		</UL>
	</UL>
	<LI>Psychometrics
	<UL>
		<LI>De-identify by instrument (remove HIPAA identifiers)
	</UL>
	<LI>Voice
	<UL>
		<LI>Identify unique keywords in response set for dynamic grammar generation
		<LI>support pre-recorded messages
	</UL>
	<LI>Navigation
	<UL>
		<LI>Pre-identify all dependent nodes via parser
		<LI>Support cascading relevance calculation
		<LI>Support canonical view of relevance criteria (for a given item, create full relevance equation which contains
		all relevance equations from all dependent items)
		<LI>With jump-to, or switch to different module, use dependency criteria to dynamically present all dependent and
		required items to user before they can switch to next screen (unless they are not page/module-required)
		<LI>Support extraction of common dependencies to module level (de-canonical so that less verbose and easier to
		read by reviewer)
		<LI>Encapsulate all navigation functionality in to a Controller
	</UL>
	<LI>Formatting
	<UL>
		<LI>Object-based at Item, Page, Module, Instrument and Study levels
		<LI>Support CSS at all levels, but modular
		<LI>Compose via page templating system (e.g. Velocity for macro-based, or Cocoon for XSLT)
	</UL>
	<LI>Extensibility
	<UL>
		<LI>Function introspection as with Velocity - uses dot notation like person.demographics.age to get/set attribute,
		and browser.print(varlist) to pass parameters to a function
	</UL>
	<LI>XForms
	<UL>
		<LI>Can Dialogix be mapped to it? (YES)
		<LI>Are XForms engines ready? (NO, as of 3/15/05)
		<LI>Can is support attributes needed by survey research (NO, as of 3/15/05)
	</UL>
	<LI>LOINC Coding Help
	<UL>
		<LI>input items
		<LI>assign 1st instrument where used
		<LI>parse text to compare to other items (e.g. via Apelon)
	</UL>
	<LI>Training Manual
	<LI>Unit testing
	<UL>
		<LI>Of parser (done)
		<LI>Of all model/view/controller components
	</UL>
	<LI>Maintenance
	<UL>
		<LI>Move all existing instruments to DB (done)
		<LI>Performance Tuning
		<LI>Capacity testing
		<LI>Load balancing
	</UL>
	<LI>Business Model
	<UL>
		<LI>FTP person to pitch to IBM
		<LI>UI person for interfaces
		<LI>Microbilling structure to support charge by instrument with proper distribution of royalties
		<LI>Business plan
		<LI>Confirm can develop profit center within RFMH
	</UL>
</UL>

<P>
<HR ALIGN="CENTER">
</P>
<P>Notes from 1/17/05</P>

<UL>
	<LI>Code Maintenance
	<UL>
		<LI>[done 1/17 ] Add Javadoc comments to existing code
		<UL>
			<LI>http://java.sun.com/j2se/javadoc/writingdoccomments/index.html
			<LI>@author name-text
			<LI>@param parameter-name description
			<LI>@return description
			<LI>@see reference
			<UL>
				<LI>@see &quot;string&quot;
				<LI>@see &lt;a href=&quot;URL#value&quot;&gt;label&lt;/a&gt;
				<LI>@see package.class#member label
			</UL>
			<LI>@throws class-name description
		</UL>
		<LI>[done 1/17 ] Change spacing, bracketting to support Java coding standards
		<UL>
			<LI>Keep lines / comments &lt; 80 characters long
			<LI>When using conditional expressions, indent twice normal to highlight nested block
			<LI>Comments should be preceeded by a blank line
			<LI>Avoid compound statements on a single line
			<LI>Avoid if statements that lack braces
			<LI>Start braces on same line as loop or conditional (not stand-alone below it)
			<LI>Switch statements -- explicitly comment if falls through
			<LI>Use XXX to say that something is bogus but works; FIXME to flag bogus and broken
			<LI>Java recommends using tab = 8 spaces; most Apache projects use 2, so I'll use 2
		</UL>
		<LI>[done 1/17] Add javadoc target to the Ant build task
		<LI>[done ] Test cases for parser as Tab delimited file (ParserTests.txt)
	</UL>
	<LI>Serialization
	<UL>
		<LI>Can the Context implement serializable and thus persist across sessions and/or stop-restarts of Tomcat?
	</UL>
	<LI>Psychinformatics Server
	<UL>
		<LI>[done] Install new Tomcat 5.5?
		<LI>Install new JDK? (what are implications on runnability of existing programs? Should install stand-beside
		<LI>Install new War versions of Dialogix on a module-by-module basis (after confirming can do proper logging
	</UL>
</UL>

<P>
<HR ALIGN="CENTER">
</P>
<P>Notes from 1/18/05</P>

<UL>
	<LI>Refactoring - Parser
	<UL>
		<LI>Context
		<UL>
			<LI>Include Parser (one Parser per Context)? Only for error reporting?
			<LI>ErrorLogger? -- so can log syntax errors from Functions, DatumMath, Datum, and have available to user for review.
			If Log4J is used, could do via DB with lookup, but overkill?
			<LI>Locale --
			<LI>Make a Factory and/or BusinessObject and/or BusinessDelegate so has common
		</UL>
		<LI>DataAccessObject
		<UL>
			<LI>Configure using XML so can interface with DB, Hashtable, Flatfile, or Sockets
			<LI>Make Interface
			<LI>If Functions run remotely, need way to pass error messagers back to Context -- a TransferObject?
		</UL>
		<LI>Datum
		<UL>
			<LI>Is Context needed here?
			<UL>
				<LI>Used for parseNumber, parseDate, formatDate, formatNumber
				<LI>get(&quot;please enter a&quot;) [-- should be in view]
				<LI>getTypeName() [-- should be part of Locale]
			</UL>
			<LI>INVALID object -- shouldn't it be a flag so can set a Datum as invalid; or always create a new one?
			<LI>Syntax: Use dot notation to get view of data, rather than casts? -- esp for Duration?
		</UL>
		<LI>DatumMath
		<UL>
			<LI>Date - Date should be Duration, which has integer values for Year, Month, Day, etc.
			<LI>Does not use Context subcomponents -- can we change passing so all functions are like op(context,a,b) instead
			of op(a,b)? Would that be helpful?
		</UL>
		<LI>Parser
		<UL>
			<LI>Fix errors in current functions
			<LI>Test date math, esp. durations
			<LI>Throw error if anything left on the parse stack
			<UL>
				<LI>(EOF or EOL before end of Statement) -- unterminated Statement
				<LI>EOL/EOF after Statement, but with earlier tokens left (e.g. &quot;(1 + 2&quot;, unclosed paren)
			</UL>
			<LI>[done ]Unit testing (ant target to automate running of tests currently passed via index.vm)
			<LI>Context Use
			<UL>
				<LI>Datum getDAO().set(String,Datum) -- XXX currently void, make return Datum for ASSIGN
				<LI>void getDAO().function()
				<LI>Datum getDAO().getDatum(String)
				<LI>error messages
			</UL>
		</UL>
		<LI>Functions
		<UL>
			<LI>Navigation
			<LI>Instrument-specific
			<LI>Node-specific
			<LI>Introspection
			<LI>API for extensibility
		</UL>
		<LI>Reserved
		<UL>
			<LI>Add persistence mechanism (e.g. via DAO?)
			<LI>Can they be treated as metadata, globals, etc so can be scoped?
		</UL>
	</UL>
	<LI>Refactoring - Navigation
	<LI>Refactoring - Views
	<LI>SQL
	<UL>
		<LI>Allow SQL queries for response sets and validation (e.g. patient lookup)
		<LI>How generalize this? (DataSource, with query against it)?
		<LI>Would Torque help for this?
		<LI>Can Dialogix also do SQL inserts into operational systems for fields that need multiple targets?
	</UL>
	<LI>[NO] POI for Excel import / export?
	<LI>[done] PHP Excel importer works well (http://www.dialogix.org/Upload.php)
	<LI>[ ] Torque for data persistence and to ease DB portability
	<UL>
		<LI>Builds 4 classes to model the connection -- BusinessObject, DAO, and Peers for each so can be done remotely.
		<LI>Builds get/set methods for each data element
		<LI>Doesn't build general insert equations for wholle object at a time
		<LI>Supports EJB persistance
		<LI>Not(?) speed optimized for multiple get/set -- perhaps solvable via transactions?
		<LI>Does(?) support access to flat file databases and/or in memory ones?
		<LI>[ ] Can it build structures on the fly? Seems to use Ant to for that
	</UL>
	<LI>[ ] FckEditor to ease web-based instrument creation?
	<UL>
		<LI>Successfully integrated it -- see \FCKeditor\* under Apache. Can download speed be improved?
	</UL>
	<LI>[DONE ] Add &quot;in&quot; operator to Dialogix parser syntax -- a form of equality operation (re priority)
	<UL>
		<LI>[ ] Dilemma -- there is no Set type which stores multiple values, so would need to re-write each time?
		<LI>[ ] Would like defined access to a DataSource, like list of patients
	</UL>
	<LI>[ ] JDBC
	<UL>
		<LI>How generic is it? Will same syntax work for all databases and data sources so can point to local files too?
	</UL>
	<LI>[ ] Compound types - e.g. define a list for (a in list)?
	<LI>[ ] Relationship to XForms - especially nesting and more complex conditionals?
</UL>

<P>
<HR ALIGN="CENTER">
</P>
<P>1/26/05</P>

<UL>
	<LI>J2EE Patterns
	<UL>
		<LI>DataAccessObject -- e.g. via DataSource?
		<LI>Intercepting Filter / Front Controller -- to handle connection
	</UL>
	<LI>Parser
	<UL>
		<LI>Do we need to support a LIST or TUPLE datatype? If so, need to modify how work with Datum, DatumMath, and how
		stored
		<LI>Do we need dot-style lookup ala Velocity?
	</UL>
	<LI>Analysis of remaining Dialogix Code &amp; Functions
	<UL>
		<LI>AnswerChoice.java
		<UL>
			<LI>Represents avaible answer options, especially if a list of msg|value pairs
			<LI>[ ] Model internally via XML structure to ease output as a Cocoon Generator?
			<LI>Should support three values: msg,index,value; where index used for selection so that multiple answers can have
			the same internal value, but order must be unique
			<LI>Also add anchor and/or help?
			<LI>Should support lazy access to database
			<LI>getMessageAt(index), getValueAt(index), etc.
		</UL>
		<LI>ASCII_CharStream.java [DONE =&gt; .jjt]
		<LI>Datum.java [DONE]
		<LI>DatumMath.java [DONE]
		<LI>Evidence.java
		<UL>
			<LI>=&gt; Functions.java
			<UL>
				<LI>[ ] Schedule &amp; Node functions
				<LI>[ ] Navigation
				<LI>[ ] Support external linking
			</UL>
			<LI>[ ] Reserved Words
			<LI>[ ] get/set values =&gt; Context.DAO
			<LI>[ ] get/set node values =&gt; Context.InstrumentAO?
			<LI>[ ] write headers and starting values =&gt; Context.?? -- initialize an instance
			<LI>[ ] Need Results object (or can DAO do this, or are there several levels for this)
			<UL>
				<LI>store data and events to generic database
			</UL>
		</UL>
		<LI>EvidenceIO.java
		<UL>
			<LI>createTempFile, saveAll, exec
			<LI>[ ] Remove these from list of functions?
		</UL>
		<LI>ExcelDecoder.java
		<UL>
			<LI>decode -- fixes double quotes within Excel
			<LI>applied to instrument columns
		</UL>
		<LI>InputDecoder.java
		<UL>
			<LI>decode -- does nothing
		</UL>
		<LI>InputEncoder.java
		<UL>
			<LI>encode -- remove tabs from a string
			<LI>applied to answers and comments, austensibly so doesn't mess up data storage
		</UL>
		<LI>JarWriter.java
		<UL>
			<LI>generates Jar files
			<LI>obsolete if write to database, else may be needed
		</UL>
		<LI>LicenseIF.java
		<UL>
			<LI>obsolete
		</UL>
		<LI>Logger.java
		<UL>
			<LI>[ ] replaced with Log4J functionality
		</UL>
		<LI>LoginTricepsServlet.java
		<UL>
			<LI>validate
			<LI>set single-use token
			<LI>check browser compatibility
			<LI>create login form
			<LI>initialize session if needed
			<LI>restore if needed, else start anew, loading init parameters from DB (setExtraParameters)
			<LI>update logon and status records in DB
			<LI>call TricepsEngine.doPost()
			<LI>if finished, update status records in DB
			<LI>class LogonRecord -- abstraction of username,password,instrument, mappings
			<UL>
				<LI>[ ] like a DAO for initialization parameters
			</UL>
		</UL>
		<LI>Node.java
		<UL>
			<LI>DisplayTypes (maps to DataTypes)
			<LI>QuestionTypes (and ActionTypes)
			<LI>One row per item, linked to AnswerChoices hashtable
			<LI>parses a source line from Excel, generating node with multi-language support (by index)
			<LI>buildOrList (debug message to show allowable data values)
			<LI>getSampleInputString() -- [ ] should this be in properties?
			<LI>prepareChoicesAsHtml() -- [ ] make modular, e.g. VelocityMacro, would need access to Node content and current
			data values; ideally with XML way to map style to template
			<LI>isWithinRange() -- [ ] validate elsewhere, since generates custom error message?
			<LI>record parse and syntax errors -- [ ] Error checker should visit each node for this?
			<LI>output to TSV or XML
			<LI>get Bean properties
			<LI>[ ] convert to read-only Bean for Velocity access?
			<UL>
				<LI>Show table of relevant questions / answer options
				<LI>Use Velocity sub-macros to do input styling?
			</UL>
		</UL>
		<LI>ParseError.java
		<UL>
			<LI>Obsolete
			<LI>[ ] Instead, create ErrorChecker which visits each node and equation and records errors
			<LI>[ ] Would want ErrorChecker accessible via Velocity as Bean?
			<LI>[ ] Should it store error information to database?
		</UL>
		<LI>ParseException.java [DONE =&gt; DialogixParser.jjt]
		<LI>Parser.java
		<UL>
			<LI>Interface to DialogixParser
			<LI>parses Strings to return boolean, String, double, Datum [ ] Move to DialogixParser?
			<LI>parseJSP (parsing nested equations): [ ] Move to DialogixParser?
		</UL>
		<LI>QSortAlgorithm.java
		<UL>
			<LI>exclusively used to sort list of instruments [ ] remove? Collections must have this
		</UL>
		<LI>Qss.java
		<UL>
			<LI>[DONE =&gt; DialogixParser.jjt]
		</UL>
		<LI>qss.jj
		<UL>
			<LI>[DONE =&gt; DialogixParser.jjt]
		</UL>
		<LI>QssConstants.java
		<UL>
			<LI>[DONE =&gt; DialogixParser.jjt]
		</UL>
		<LI>QssTokenManager.java
		<UL>
			<LI>[DONE =&gt; DialogixParser.jjt]
		</UL>
		<LI>Schedule.java
		<UL>
			<LI>Flow: Initialize Triceps, Evidence, reserveds; load schedule, check validity, parse headers
			<LI>Defines reserved words. [ ] cant they be moved to proper support class based upon function?
			<UL>
				<LI>Instrument Model {languages, author, version, name,
				<LI>Runtime {filename, workingdir, completeddir, redirectOnFinish, browser, ip, displaycount
				<LI>Navigation {starting step, current step, allow refused/unasked,
				<LI>Authoring {debug, developer
				<LI>Cosmetics {title, icon, header_msg, icons, field_width,
			</UL>
			<LI>setReserved() - calls all support functions, tightly coupled with other functions
			<UL>
				<LI>lots of code to catch number format errors. [ ] replace with schema validation?
			</UL>
			<LI>parserReserved(), writeReserved()
			<LI>recalculateInNewLanguage() -- only needed for Eval nodes
			<LI>loadSchedule() - from file. [ ] allow load from DB
			<LI>bracesMatch()
			<LI>parseNode() [ ] move this to Node or NodeIO that reads from data source and uses Node internally?
			<LI>getNode(index)
		</UL>
		<LI>ScheduleList.java
		<UL>
			<LI>Find all schedules in a directory, detecting changes
			<LI>[ ] replace this with study-specific DB query for instrument metadata
		</UL>
		<LI>ScheduleSource.java
		<UL>
			<LI>Reads individual schedules from .txt or .jar files
			<LI>[ ] replace with instrument specific DB query
		</UL>
		<LI>SourceInfo.java
		<UL>
			<LI>Helper function for ScheduleSource -- obsolete
		</UL>
		<LI>Token.java
		<UL>
			<LI>[DONE =&gt; DialogixParser.jjt]
		</UL>
		<LI>TokenMgrError.java
		<UL>
			<LI>[DONE =&gt; DialogixParser.jjt]
		</UL>
		<LI>Triceps.java
		<UL>
			<LI>Supported functionality
			<UL>
				<LI>parser
				<LI>data logger
				<LI>event logger
				<LI>locale
				<LI>schedule
			</UL>
			<LI>Navigation
			<UL>
				<LI>gotoFirst(), gotoStarting(), jumpToNode(),suspendToFloppy(), gotoNext(), gotoPrevious()
				<LI>collectNextNodeSet(), collectPreviousNodeSet()
				<LI>getRelevantNodes()
			</UL>
			<LI>DataIO
			<UL>
				<LI>getDatum(node)
				<LI>getStartTime()
				<LI>getQuestionStr(Node) - with formatting
			</UL>
			<LI>Debugging
			<UL>
				<LI>collectParseErrors(), size(), isSet(Node)
				<LI>isBlockOK() -- whether a node-set has balanced open/close braces
				<LI>reloadSchedule (with any needed changes, but keeping current data)
				<LI>resetEvidence() -- clear databuffer
			</UL>
			<LI>Logging
			<UL>
				<LI>processEventTimings() -- sends data to event logger
				<LI>storeValue(Node,answer,comment,special) -- does validation, then stores. [ ] Move to ??
				<LI>record response latency
			</UL>
			<LI>Locale =&gt; Context?
		</UL>
		<LI>TricepsEngine.java
		<UL>
			<LI>Functions
			<UL>
				<LI>init all reserved variables, directories
				<LI>process post/get
				<LI>processDirective() -- responds to all navigation and debugging commands like Controller
				<LI>makes all HTML and Javascript
				<LI>set extra parameters from login database (if have username/password)
				<LI>make XML version
				<LI>queryUser() -- assembles subcomponents into page
			</UL>
			<LI>[ ] Move all to JSP or equivalent?
		</UL>
		<LI>TricepsServlet.java
		<UL>
			<LI>Invalidate sessions
			<LI>init DB
			<LI>logPageHit() -- logs to DB
		</UL>
		<LI>Value.java
		<UL>
			<LI>Support function for Evidence - maps Datum to Node within Schedule, allowing for multiple aliases
			<LI>[ ] replace with DAO?
		</UL>
		<LI>VersionIF.java
		<UL>
			<LI>[ ] make obsolete -- move study specific parameters to config, not hard-compiled
		</UL>
		<LI>XMLAttrEncoder.java
		<UL>
			<LI>=&gt; utils/XMLAttrEncoder
			<LI>converts strings so XML doesn't think they are commands
		</UL>
		<LI>XmlString.java
		<UL>
			<LI>HTML-Tidy, but selectively removes unwanted tags, always matches braces
			<LI>[ ] if keep, accept a Writer, instead of using StringBuffer (probably source of memory leak)
		</UL>
	</UL>
	<LI>Porlets
	<UL>
		<LI>JPS -- Java Portlet Specification -- JSR 168 specification for portlets -- does it support events (for synchronizing
		data within a page)?
		<LI>How does it support context -- local Portal parameters, Locale, look &amp; feel - should I be using that model?
		<LI>How does it support data sources -- can I use their style?
		<LI>WSRP -- Web Services for Report Portlets
		<LI>Support versioning -- how? Can I use this for versions of instruments?
	</UL>
</UL>

<P>
<HR ALIGN="CENTER">
</P>
<P>3/23/2005</P>
<P>Key Constraints re Language Selection</P>

<UL>
	<LI>Equation Parser
	<UL>
		<LI>Must be extensible with introspection of new functions
		<UL>
			<LI>Ideally, let new functions be defined as with JavaScipt
		</UL>
		<LI>Must support multiple levels of missing values and propagate them properly
		<UL>
			<LI>All native types should be composed of three attributes: (datatype, value, valuetype), where datatype in {integer,
			float, text, date, time, etc.}, value is the storage space, and valuetype specifies whether it is a missing value
			- e.g. { answered, unasked, refused, unknown, not_applicable, invalid, unclear }
			<LI>Arrays should support missing values at the variable level -- e.g. can't have one or more values and also have
			valuetype other than answered
			<LI>Calculations containing missing values must result in missing values, and support precidence of them (e.g.
			invalid &gt; n/a &gt; [other missing types] &gt; answered)
			<LI>Must support complete operator overloading so that missing values can be computed -- it not at object level,
			must be able to have value space and aligned bitmask to specify valuetype
		</UL>
		<LI>Must be written in YACC (yet another compiler compiler) or derived language so that grammar can be refined
		as needs change
		<LI>Must support abstracted data access / storage so can automatically retrieve data from server it remote without
		change to actual equation (e.g. separate file defines where each variable is stored and equation parser gets data
		from whereever it is based upon the variable name)
		<LI>Must use loosely defined data types (e.g. auto-conversion of text to number and date, depending upon how used)
		<LI>Must support arrays
		<LI>Should support XPath-like hierarchical searching.
		<LI>Must have ability to lock down language features based upon security roles (e.g. administrator must explicitly
		support certain types of introspection)
		<LI>Must support Perl-style regular expressions for pattern matching validation
	</UL>
	<LI>Text Parser
	<UL>
		<LI>Must be inherently multi-lingual, especially re date, time, and currency calculations, input/output, and formatting
		<LI>Must support security-based HTML-Tidy to fix markup and selectively remove undesired classes of data
		<LI>Must support embedeed calling of equation parser
	</UL>
	<LI>Cascading layout renderer
	<UL>
		<LI>Ideally object based to attach attributes to itesm, pages, modules, etc.
		<LI>Must support inheritance of CSS properties at multiple levels
		<LI>Must support clean separation of view logic from model and controller
	</UL>
	<LI>Portability / Scalability
	<UL>
		<LI>Must be able to install entire application on least expensive laptop (e.g. running Linux)
		<LI>Must
	</UL>
	<LI>Available Language Options
	<UL>
		<LI>Java - OK
		<UL>
			<LI>has JavaCC, (Java Compiler Compiler), in which Dialogix currently witten
			<LI>Many existing JavaCC grammars, so should be able to adapt to use arrays and introspection (e.g. borrow from
			Velocity code which already does this)
		</UL>
		<LI>JavaScript - ?
		<UL>
			<LI>Does use loosely defined types and easy function creation
			<LI>Can it support operator overloading for missing value types? (unclear)
			<LI>Can the language be extended via a compiler compiler?
			<LI>Can language features be locked down?
		</UL>
		<LI>Python - ?
		<UL>
			<LI>Is inherently object oriented even to lowest data type
			<LI>Can lowest data type be re-defined to inherit missing value attributes? (unclear)
			<LI>Is there a Python compiler compiler?
			<LI>Can language features be locked down?
		</UL>
		<LI>.NET -?
		<UL>
			<LI>Locked into Windows environment? If Open-Source Mono project not good enough to ensure portability, then .NET
			not a viable option.
			<LI>Need expert to answer same questions as for other languages
		</UL>
	</UL>
</UL>


<BLOCKQUOTE>
	<P>
</BLOCKQUOTE>

<P>Staffing / Task Needs (DRAFT / INCOMPLETE)

<UL>
	<LI>Architecture / Design
	<UL>
		<LI>Language selection
		<UL>
			<LI>Language expert to address language choice options
			<LI>If non-Java, need compiler design export for that language available to design and maintain the controllers
		</UL>
		<LI>Conceptual, Process &amp; Schema Modeling
		<UL>
			<LI>Enhance model to better support modules, arrays, SQL interface, and attributes at each level
		</UL>
		<LI>Data Modeling Expert
		<UL>
			<LI>Ensure that model will support dynamic geneation of generic, structured, star-schema, and GIS OLTP / OLAP DBs
		</UL>
		<LI>Information Architect
		<UL>
			<LI>Identify features needed for study management and design of data bases, processes, UI to support them
		</UL>
		<LI>UI Expert
		<UL>
			<LI>working with conceptual modeling to ensure can design convenient UIs for system (all of which will be views
			of underlying model)
		</UL>
		<LI>Technical Documentation Expert
		<UL>
			<LI>Convert / refine above requirements into technical design document
			<LI>Specify using UML use cases
		</UL>
	</UL>
	<LI>Project Manager
	<UL>
		<LI>Sufficient technical expertise to ensure that architecture remains as portable and flexible as possible --
		avoiding OS lock-in
		<LI>Formal project training to keep on track / budget
	</UL>
	<LI>Programmers
	<LI>Database Analysts / Managers
	<LI>Statistical Consultant 
	<UL>
		<LI>To ensure that modeling needs are addressed
		<LI>To specify how system needs to be modeled to support Item Response Theory analysis and Item Banking
	</UL>
	<LI>Informatics Consultant
	<UL>
		<LI>Terminology maintanance
		<LI>Version control
	</UL>
	<LI>Business Owner
	<UL>
		<LI>Someone with enough content and domain knowledge to be groomed to take over my role re needed design features
		and architectures
	</UL>
</UL>


</BODY>

</HTML>